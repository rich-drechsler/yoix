Two very important Perl scripts that handle communications with clients and
coordinate the low level work, two small C programs that execute those Perl
scripts when they're called by cgi scripts, and several other scripts that
occasionally are useful. Understanding ywait_exec._PL is worthwhile because
it's the Perl script that you update when you start customizing YWAIT. You
also should take a look at the C programs if you decide they need to be
installed as setuid or setgid executables (check the SERVER_SETUIDFILES
definition in ../make/variables.mk).

By default YWAIT tries to provide some security using a simple password file
to validate users and a token, that we call a sessionid, to restrict access
to scripts that can do things (e.g., accessing a database) that should be
protected. We think the security is adequate for services that are provided
on a well-managed private network (e.g., a corporate network), but we don't
guarantee it, so security is something you have to decide for yourself. If
necessary, additional protection should be added using readily available
solutions like https, which is supported by Java and the Yoix interpreter,
or VPN (Virtual Private Network). Plugging your own user validation in is
also easy (see ywait_login._PL below) and probably is something you should
do if you're concerned about security.

    ywait_exec._C
    ywait_login._C
	Small C programs called by the cgi scripts that exec() the Perl
	scripts that handle the real work. They exist because web servers
	don't always run your cgi scripts as "you" and operating systems
        usually won't recognize setuid or setgid scripts. Install them
	as setuid and setgid executables when httpd isn't cooperating
	and the Perl scripts they exec() should run as "you". Check the
	SERVER_SETUIDFILES variable defined in ../make/variables.mk to
	see which files are installed as setuid and setgid executables.

    ywait_exec._PL
	Handles most of the communications with the client after the
	user logs in. It's a very important script and is the one you
	often need to change when you start customizing YWAIT. We left
	lots of comments in the file, so if you know Perl you probably
	won't have too much trouble following the script, however you
	eventually may want to toss most of our comments and the code
	that we added to handle the "server" demos.

	Every request has to include a sessionid that passes a series
	of tests that are carried out by

		../subs/checkid.pl

	otherwise the request is rejected. Every sessionid generated
	by a successful login is saved on the server until it expires
	or the user logs out, so the most obvious sessionid check is
	that it must be one that we generated. The client's original
	IP address is saved in the sessionid, and by default we also
	check to make sure httpd is talking to the IP address that's
	recorded in the sessionid.

	The sessionid also contains several time stamps and a randomly
	generated string of characters, so guessing a valid sessionid
	using available information about the user won't be trivial.
	We believe that stealing sessionids or data by eavesdropping
	is a separate issue that should be dealt with using https or
	VPN.

    ywait_login._PL
	Handles login requests. It's responsible for validating users
	and distributing a token (the sessionid) that must accompany
	every request handled by ywait_exec._PL. By default YWAIT uses
	a simple passwd file (described in ../etc/README) to validate
	users. The passwd file mechanism is easy to change, so you
	shouldn't have trouble plugging in your own user validation.
	Basically all you have to do is follow the comments in

		../subs/ywait_validation.pl

	which is the Perl subroutine that's responsible for all user
`	validation. Replace our ValidateUser() call in the subroutine
	with your own code, follow the return value rules outlined in
	the comments, and that should do it.

	The sessionids that we mentioned above are generated by

		../subs/ywait_makeid.pl

	and contain about 15 space separated fields. The client gets
	a sessionid after a successful login and the server saves a
	copy that sessionid until the user quits or the sessionid
	expires. You can modify our sessionids (e.g., add fields) if
	you want, but you need to make sure every Perl script that
	uses the sessionid is happy. One way to find the scripts is
	to grep for SESSIONIDFIELDS.

    ywait_subtester._PL
	A script that you can use to test new perl subroutines that go
	in the ../subs directory and are primarily used by the two Perl
	scripts that handle login and command execution for clients.

    yoix._PL
	A script that runs the Yoix interpreter using the application's
	jar file that's installed under SERVER_DOCDIR. It's occasionally
	convenient, but the startup overhead means it's probably not a
	script you should use for handling client requests.

