sub peer_validation {
    #
    # This script is a placeholder for a login validation function that you
    # can, and perhaps should, write. We provide a simple default mechanism
    # that uses a password file that's located in the etc directory. You may
    # want to provide your own user authentication rather than rely on our
    # password file.
    #
    # This function is called from the login cgi script with four arguments:
    #
    #    1. User id
    #    2. Password
    #    3. Name of the command, which will be LOGIN, RECONNECT, LOGID, or
    #       RECONID. Our default implementation ignores this argument and
    #       we recommend you think carefully before you start treating them
    #       differently. LOGID is generated by the login screen that only
    #       asks for a user id, but giving away a session id to anyone who
    #       somehow calls the cgi login script with LOGID as the argument
    #       seems like a bad idea. RECONID is generated by the reconnect
    #       screen that's used when a session established with LOGID times
    #       out.
    #    4. Client address (ip or hostname), which may be ignored.
    #
    # After validation, it should return an array of one to five elements in
    # this order:
    #
    #    1. status
    #    2. arg
    #    3. group
    #    4. number
    #    5. feature set
    #
    # where status, group, number are as follows:
    #
    #     status - a string giving the login validation results, where:
    #         "ok" - means login info was valid and login was a success
    #         "failed" - if used, the supplied password was incorrect
    #         "expired" - password info has expired (user will be prompted
    #                     to enter a new password). Note: returning "expired"
    #                     when "NO_PASSWORD" is in effect is meaningless and
    #                     will be treated as "ok"
    #         "locked" - account was locked by the system or the administrator;
    #                    user should contact the administrator to find out
    #                    what is going on
    #         "lapsed" - login has lapsed due to inactivity (length of
    #                    inactivity can be supplied via number (below))
    #         "security" - too many attempts have been made without an
    #                      intervening successful login (count of attempts
    #                      can be supplied via number (below))
    #         "syserr" - some system error occurred during validation
    #     arg - an optional status dependent argument that's interpreted as the
    #         allowed "command set" when status is "ok" and a failure explanation
    #         (i.e., the reason for the failure) otherwise. Omitting arg or setting
    #         it to "" or ".*" when status is "ok" means an unrestriced command set.
    #     group - a string giving the associated group name for this user-id (if
    #         not used, it should be set to "")
    #     number - an integer; if supplied and status is "lapsed", then the time
    #         in seconds since the id lapsed due to inactivity; if supplied
    #         and status is "security", then the number of consecutive
    #         failure attempts; if supplied and status is "failed", then
    #         it is the number of remaining attempts available before
    #         lock out.
    #     feature set - an application specific string that can be used to
    #         send back information to the application as to what
    #         application features the user may access; it is also
    #         a way to send back debugging info when that is needed
    #
    # The position of each value is fixed (i.e., status is always first,
    # arg second, group third, etc.). However, only status must be supplied.
    #

    #############################################################
    #
    # Replace the code below here (to the next comment block)
    # with your application specific code.
    #
    #############################################################

    #
    # We completely ignore the command argument, which is the safest
    # approach. The ValidateUser() function supports a -v option that
    # would let you validate a user when no password was supplied and
    # the command was LOGID.
    #
    my $opt;
    if ($_[2] eq "LOGID" || $_[2] eq "RECONID") {
	$opt = "-e";
    } else {
	$opt = "--";
    }
    return(ValidateUser($opt, $_[0], $_[1]));

    #############################################################
    #
    # End code replacement
    #
    #############################################################
}

return 1;
