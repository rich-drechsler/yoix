//
// A template for a simple screen the contains a JLabel, a JTextArea, and
// a JPanel that holds a JCheckBox, a JChoice, and JButtons. Illustrates
// one way to horizontally center a component (e.g., the panel containing
// the buttons) in a screen when it's surrounded by components (e.g., the
// checkbox and choice) that don't necessarily have the same size. This
// screen also includes a menubar that uses the JFrame's actionPerformed()
// event handler and a windowClosing() event handler that uses a confirm
// dialog to make sure the user is ready to close the screen.
//

import yoix.*.*;

Dictionary Global = argv[1];

//
// These are the event handlers that we want to use in components that we
// build using functions defined in ywait_constructors.yx.
//

ItemStateChangedChecked(e) {
    String message = "Approved is" + (state ? " " : " not ") + "checked.";

    //
    // Notice the the checkbox isn't completely repainted until you dismiss
    // the dialog if ShowMessage() is called from this event handler. Change
    // the call to something like,
    //
    //    Global.QueueCommand(root, &root.HandleCheckBox, message);
    //
    // and it will be immediately repainted.
    //

    Global.ShowMessage(root, message);
}

ItemStateChangedSelected(e) {
    //
    // You get two events when something changes. One is for the item that
    // was "deselected" and the second is for the newly selected item.
    //

    Global.ShowText(
	root,
	strfmt("You get two events when a change is made - this event is:\n\ne=%O\n", e),
	TRUE
    );
}

Builder(String name, Array args) {

    JFrame screen = {
	Insets border = Global.GetLabeledScreenInsets();
	String title = Global.ACRONYM + " Template 4a";
	Font   font = Global.GetPreferredLabelFont();
	int    opaque = TRUE;

	//
	// This is starting screen size. Setting size to NULL is special
	// and means the individual components displayed in the screen
	// determine the size.
	//

	Dimension size = {
	    double width = 7.0*72;
	    double height = 3.0*72;
	};

	////////////////////////////
	//
	// Screen Variables
	//
	////////////////////////////

	//
	// Every screen should define and initialize the following set
	// of variables. Expect problems is you omit any of them.
	//

	String screenbuilder = global.argv[0];
	String screenname = name;
	String screentitle = NULL;
	Object anchorpoint = NULL;
	Color  screencolor = NULL;
	int    anchorstyle = AUTOMATIC;
	int    screenanchor = CENTER;
	int    initialized = FALSE;
	int    disposeonclose = TRUE;
	int    savestate = TRUE;   // save screen-specific info within session
	int    retainstate = TRUE; // save screen-class info across sessions
	int    reloadargs = FALSE;

	////////////////////////////
	//
	// MenuBar Layout
	//
	////////////////////////////

	JMenuBar menubar = {
	    Font font = Global.GetPreferredMenuFont();

	    //
	    // JMenuItems can define actionPerformed() and itemStateChanged()
	    // event handlers, which is the approach we've adotped here. The
	    // alternative (you normally don't mix the two methods) is define
	    // actionPerformed() and itemStateChanged() in the JFrame and let
	    // them handle events generated by the menubar. There's an example
	    // of this approach in another template screen.
	    //

	    Array items = {
		new JMenu {
		    String text = "File";
		    Array items = {
			new JMenuItem {
			    String text = "Open";
			    String command = "file_open";
			},
			NULL,
			new JMenuItem {
			    String text = "Dismiss";
			    String command = "file_dismiss";
			},
		    };
		},
		new JMenu {
		    String text = "Edit";
		    Array items = {
			new JMenuItem {
			    String text = "Undo";
			    String command = "undo";
			},
			new JMenuItem {
			    String text = "Update";
			    String command = NULL;	// event will use text value
			},
		    };
		},
		new JMenu {
		    String text = "Help";
		    Array items = {
			new JMenuItem {
			    String text = "About";
			    String command = "help_about";
			},
		    };
		},
	    };
	};

	////////////////////////////
	//
	// Screen Layout
	//
	////////////////////////////

	GridBagLayout layoutmanager;

	Array layout = {
	    Global.NewJHeadingLabel(NULL, "Another Template Screen"),
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
	    },

	    Global.NewJTextArea(
		"$_textarea", "Change this message to whatever you want...\n", 0, 0, AS_NEEDED,
		"textwrap", 0,
		"edit", FALSE
	    ),
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
		int weightx = 1;
		int weighty = 1;
		int fill = BOTH;
	    },

	    new JPanel {
		//
		// We use this technique when we there are several components
		// that need to be arranged in a row and we want one of them,
		// usually several buttons, to be horizontally centered in the
		// screen. If you think a BorderLayout also works then give
		// it a try, but make sure you test the case where the left
		// and right components are a different size. You probably
		// should also move the components (with their constraints)
		// around in the layout array and see what happens when the
		// screen gets very small.
		//
		GridBagLayout layoutmanager;

		Array layout = {
		    new JPanel {
			//
			// Use GridLayout for equal size buttons and FlowLayout if
			// each button should size itself based on its label.
			//
			GridLayout layoutmanager;
			Array layout = {
			    new JButton {
				String text = "Send";
				Font   font = Global.GetPreferredButtonFont();

				actionPerformed(e) {
				    //
				    // You undoubtedly have work to do here. All we
				    // currently do is arrange to call HandleSend()
				    // (it's defined below) from the command thread
				    // rather than from Java's event thread. It's a
				    // common approach when the work we're supposed
				    // to do could take a while (e.g., contacting the
				    // server).
				    //
				    Global.QueueCommandOnce(root, &root.HandleSend);
				}
			    },
			    new JButton {
				String text = "Clear";
				Font   font = Global.GetPreferredButtonFont();

				actionPerformed(e) {
				    root.ClearScreen();
				}
			    },
			    new JButton {
				String text = "Dismiss";
				Font   font = Global.GetPreferredButtonFont();

				actionPerformed(e) {
				    Global.AltQueueCommand(root, &root.HideScreen);
				}
			    },
			};
		    },
		    new Dictionary {
			int gridx = 1;
			int gridy = 1;
			int weightx = 1;
		    },

		    Global.NewJCheckBox(
			"$_checkbox", "Approved", NULL, FALSE,
			"requestfocusenabled", FALSE,
			"itemStateChanged", ItemStateChangedChecked
		    ),
		    LEFT,

		    Global.NewJChoice(
			"$_choice", new Array {"Item 1", "1", "An Item", "2", "Item 3", "3"}, 0,
			"itemStateChanged", ItemStateChangedSelected
		    ),
		    RIGHT,
		};
	    },
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		int    fill = HORIZONTAL;
		Insets insets = Global.GetQualifiedInsets(72.0/8, "T");
	    },

	    Global.NewJProprietaryLabel(),
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		Insets insets = Global.GetQualifiedInsets(72.0/32, "T");
	    },
	};

	////////////////////////////
	//
	// Event Handlers
	//
	////////////////////////////

	actionPerformed(e) {
	    String text;

	    switch (e.command) {
		case "file_open":
		    Global.ShowMessage("Handling the menubar's Open command");
		    break;

		case "file_dismiss":
		    Global.AltQueueCommand(this, &HideScreen);
		    break;

		case "help_about":
		    Global.ShowVersion(this);
		    break;

		case "undo":
		    Global.ShowUnimplemented(this);
		    break;

		case "Update":
		    text = strfmt("%s\nReceived %O\n\n", date(), e);
		    fprintf(stderr, text);
		    //
		    // The appendText() builtin is more efficient.
		    //
		    components.$_textarea.text += text;
		    break;

		default:
		    Global.ShowError(this, "Missing action for command: " + e.command);
		    break;
	    }
	}

	windowClosed(e) {
	    //
	    // Screens that don't define their own windowClosed() event
	    // handler automatically get one that calls HideScreen(), so
	    // we could omit this if we wanted.
	    //

	    HideScreen();
	}

	windowClosing(e) {
	    //
	    // Returning 0 means the Yoix interpreter will dispose this
	    // screen and that will generate WindowEvent that's handled
	    // by our windowClosed() event handler.
	    //

	    return(!Global.ShowConfirm(this, "Do you really want to dismiss this screen?").confirmed);
	}

	////////////////////////////
	//
	// Screen Functions
	//
	////////////////////////////

	ClearScreen() {
	    components.$_textarea.text = "";
	}

	HideScreen() {
	    Global.HideScreen(this);
	}

	////////////////////////////
	//
	// Miscellaneous Functions
	//
	////////////////////////////

	HandleCheckBox(String message) {
	    Global.ShowMessage(this, message);
	}

	HandleSend() {
	    //
	    // This function is eventually called when the user presses
	    // the Send button. All we do is pop up a message dialog, so
	    // you will have to change things. You probably will want to
	    // contact the server using Global.QueueCommand(), however
	    // in this case Global.RunCommand() may be more appropriate
	    // because we probably know we got here via QueueCommand()
	    // when the Send button was pressed.
	    // 

	    Global.ShowMessage(this, "This is a message from HandleSend...");
	    HideScreen();
	}
    };

    return(screen);
}

return(Builder);

