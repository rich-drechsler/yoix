//
// A dialog that lets users change passwords.
//

import yoix.*.*;

Dictionary Global = argv[1];

TextValueChanged(e) {
    if (focusowner)
	root.components.$_message.text = "";
}

Builder(String name, Array args) {

    JDialog screen = {
	Dimension size = NULL;
	Insets    border = Global.GetLabeledScreenInsets();
	String    title = Global.ACRONYM + " Send Password";
	Font      font = Global.GetPreferredLabelFont();
	int       modal = TRUE;
	int       opaque = TRUE;

	////////////////////////////
	//
	// Screen Variables
	//
	////////////////////////////

	String screenbuilder = global.argv[0];
	String screenname = name;
	String screentitle = NULL;
	Object anchorpoint = NULL;
	Color  screencolor = NULL;
	int    anchorstyle = AUTOMATIC;
	int    screenanchor = CENTER;
	int    initialized = FALSE;
	int    disposeonclose = TRUE;
	int    savestate = FALSE;   // save screen-specific info within session
	int    retainstate = FALSE; // save screen-class info across sessions
	int    reloadargs = FALSE;

	////////////////////////////
	//
	// Custom Variables
	//
	////////////////////////////

	String result = "failed";
	int    expired = FALSE;

	Array actionlabels = {
	    "Changing " + Global.ACRONYM + " password for user " + Global.UserName,
	    "Your password has expired - pick a new one",
	};

	////////////////////////////
	//
	// Screen Layout
	//
	////////////////////////////

	GridBagLayout layoutmanager;

	Array layout = {
	    Global.NewJHeadingLabel("$_actionlabel", NULL),
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
	    },

	    new JPanel {
		GridBagLayout layoutmanager;

		Array layout = {
		    "Old Password",
		    new GridBagConstraints {
			int gridx = 1;
			int gridy = 1;
			int anchor = RIGHT;
		    },

		    Global.NewJTextField(
			"$_oldpass", NULL, 10,
			"echo", '*',
			"requestfocus", TRUE,
			"textValueChanged", TextValueChanged
		    ),
		    new GridBagConstraints {
			int gridx = 2;
			int gridy = 1;
			int weightx = 1;
			int fill = HORIZONTAL;
			int anchor = LEFT;
		    },

		    "New Password",
		    new GridBagConstraints {
			int gridx = 1;
			int gridy = 2;
			int anchor = RIGHT;
		    },

		    Global.NewJTextField(
			"$_newpass1", NULL, 10,
			"echo", '*',
			"textValueChanged", TextValueChanged
		    ),
		    new GridBagConstraints {
			int gridx = 2;
			int gridy = 2;
			int weightx = 1;
			int fill = HORIZONTAL;
			int anchor = LEFT;
		    },

		    "Confirm",
		    new GridBagConstraints {
			int gridx = 1;
			int gridy = 3;
			int anchor = RIGHT;
		    },

		    Global.NewJTextField(
			"$_newpass2", NULL, 10,
			"echo", '*',
			"textValueChanged", TextValueChanged
		    ),
		    new GridBagConstraints {
			int gridx = 2;
			int gridy = 3;
			int weightx = 1;
			int fill = HORIZONTAL;
			int anchor = LEFT;
		    },
		};
	    },
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
		int anchor = CENTER;
		int fill = BOTH;

		Insets insets = {
		    double top = 72.0/4;
		    double left = 1.5*72.0;
		    double right = 1.5*72.0;
		    double bottom = 72.0/4;
		};
	    },

	    Global.NewJLabel("$_message", NULL, "foreground", Global.GetPreferredWarningColor()),
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
	    },

	    new JPanel {
		GridLayout layoutmanager;
		Array layout = {
		    new JButton {
			String text = "Send";
			Font   font = Global.GetPreferredButtonFont();

			actionPerformed(e) {
			    Dictionary cmpts = root.components;

			    cmpts.$_message.text = "";
			    Global.QueueCommandOnce(
				root,
				&root.SendPassword,
				cmpts.$_oldpass.text,
				cmpts.$_newpass1.text,
				cmpts.$_newpass2.text
			    );
			}
		    },

		    new JButton {
			String text = "Dismiss";
			Font   font = Global.GetPreferredButtonFont();

			actionPerformed(e) {
			    Global.AltQueueCommand(root, &root.HideScreen);
			}
		    },
		};
	    },
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		Insets insets = Global.GetQualifiedInsets(72.0/4, "T");
	    },

	    Global.NewJProprietaryLabel(),
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		Insets insets = Global.GetQualifiedInsets(72.0/32, "T");
	    },
	};

	////////////////////////////
	//
	// Screen Functions
	//
	////////////////////////////

	ClearScreen() {
	    components.$_message.text = "";
	    components.$_oldpass.text = "";
	    components.$_newpass1.text = "";
	    components.$_newpass2.text = "";
	}

	HideScreen() {
	    if (expired && strcasecmp(result, "ok"))
		Global.Quit(1);
	    else Global.HideScreen(this);
	}

	LoadScreen() {
	    components.$_actionlabel.text = actionlabels[expired ? 1 : 0];
	}

	////////////////////////////
	//
	// Miscellaneous Functions
	//
	////////////////////////////

	SendPassword(String opass, String pass1, String pass2) {
	    Array data;

	    //
	    // Previous version didn't require opass, so you may want to
	    // back it out. Figured if user got on without one then they
	    // can supply anything or we might require something specific,
	    // like an email address. Not 100% convinced, so you may want
	    // to back it out.
	    //

	    if (opass@sizeof > 0) {
		if (pass1@sizeof > 0 && strcmp(pass1, pass2) == 0) {
		    data = Global.RunCommand(
			this,
			"CHANGEPASSWORD", "",
			opass,
			pass1
		    );
		    result = (data@sizeof > 0 && data[0] != NULL) ? trim(data[0]) : "failed";
		    if (strcasecmp(result, "ok") == 0) {
			components.$_message.foreground = Global.GetPreferredActiveColor();
			expired = FALSE;
			root.HideScreen();
			Global.ShowMessage("Your password has been successfully changed");
		    } else {
			components.$_message.foreground = Global.GetPreferredWarningColor();
			components.$_message.text = "Your password has not been changed";
			components.$_oldpass.text = "";
			components.$_oldpass.requestfocus = TRUE;
		    }
		} else {
		    components.$_message.text = "";
		    components.$_message.foreground = Global.GetPreferredWarningColor();
		    components.$_newpass1.text = "";
		    components.$_newpass2.text = "";
		    components.$_message.text = "Please type and confirm your new password";
		    components.$_newpass1.requestfocus = TRUE;
		}
	    } else {
		components.$_message.text = "";
		components.$_message.foreground = Global.GetPreferredWarningColor();
		components.$_message.text = "You must supply your old password";
		components.$_oldpass.requestfocus = TRUE;
	    }
	}
    };

    return(screen);
}

return(Builder);
