//
// Screen that displays debugging messages and handles other debugging
// tasks (current set may be very limited). Only for developers, so it's
// not a screen that will normally be shown.
//

import yoix.*.*;

Dictionary Global = argv[1];

int USEMONOSPACE = TRUE;
int SHOWMONOSPACE = TRUE;

ItemStateChanged(e) {
    root.SyncFonts();
}

Builder(String name, Array args) {

    JFrame screen = {
	Insets border = Global.GetUnLabeledScreenInsets();
	String title = Global.ACRONYM + " Debugger";
	Font   font = Global.GetPreferredLabelFont();
	int    opaque = TRUE;

	Dimension size = NULL;

	////////////////////////////
	//
	// Screen Variables
	//
	////////////////////////////

	String screenbuilder = global.argv[0];
	String screenname = name;
	String screentitle = NULL;
	Object anchorpoint = NULL;
	Color  screencolor = NULL;
	int    anchorstyle = AUTOMATIC;
	int    screenanchor = SOUTHEAST;
	int    initialized = FALSE;
	int    disposeonclose = FALSE;
	int    savestate = TRUE;   // save screen-specific info within session
	int    retainstate = TRUE; // save screen-class info across sessions
	int    reloadargs = TRUE;

	////////////////////////////
	//
	// Custom Variables
	//
	////////////////////////////

	String command = "";
	String command_arg = "";
	Array  command_results[0];

	String startup = "RESET_SCREENS";
	int    autorun = FALSE;
	int    showmonospace = SHOWMONOSPACE;
	int    usemonospace = USEMONOSPACE;

	////////////////////////////
	//
	// Screen Layout
	//
	////////////////////////////

	GridBagLayout layoutmanager;

	Array layout = {
	    Global.NewJTextArea("$_textarea", NULL, 3, 0, AS_NEEDED),
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
		int weightx = 1;
		int weighty = 1;
		int fill = BOTH;
	    },

	    new JPanel {
		GridBagLayout layoutmanager;
		Array layout = {
		    new JPanel {
			String tag = "$_panel";
			GridLayout layoutmanager;
			Array layout = {
			    new JButton {
				String tag = "$_execute";
				String text = "Execute";
				Font   font = Global.GetPreferredButtonFont();
				int    requestfocus = TRUE;
				int    lasttotal = -1;

				actionPerformed(e) {
				    String message;
				    String selection;

				    switch (root.components.$_executechoice.selected) {
					case "ADD_MARK":
					    message = "Marked...\n";
					    break;

					case "CACHE_STATUS":
					    message = "Screen cache status" + Global.GetScreenCacheStatus("    ") + "\n";
					    break;

					case "COLLECT_GARBAGE":
					    Global.CollectGarbage();
					    message = Global.MemoryUsage(&lasttotal) + "\n";
					    break;

					case "MEMORY_USAGE":
					    message = Global.MemoryUsage(&lasttotal) + "\n";
					    break;

					case "PING_SERVER":
					    Global.PingServer("Debugger Test", TRUE);
					    message = "Server pinged\n";
					    break;

					case "RESET_ALL":
					    Global.ResetCursors();
					    Global.ResetPlugins();
					    Global.ResetScreens(TRUE);	// TRUE means all screens
					    message = "Cursors, plugins, and all screens reset\n";
					    break;

					case "RESET_CURSORS":
					    Global.ResetCursors();
					    message = "Cursors reset\n";
					    break;

					case "RESET_PLUGINS":
					    Global.ResetPlugins();
					    message = "Plugins reset\n";
					    break;

					case "RESET_SCREENS":
					    Global.ResetScreens();
					    message = "Screens reset\n";
					    break;

					case "TEST_PLUGIN_1":
					    Global.GetAndShowScreen(
						"test_plugin_1", "test_plugin",
						"screentitle", "1",
						"command_arg", "1",
						"screenanchor", SOUTH,
						"anchorpoint",
						new Point {
						    double x = VM.screen.width/2;
						    double y = root.location.y - 72.0/4;
						}
					    );
					    message = "Show plugin test 1 screen\n";
					    break;

					case "TEST_PLUGIN_2":
					    Global.GetAndShowScreen(
						"test_plugin_2", "test_plugin",
						"screentitle", "2",
						"command_arg", "2",
						"screenanchor", SOUTHEAST,
						"anchorpoint",
						new Point {
						    double x = VM.screen.width/2 - 72.0/2;
						    double y = root.location.y;
						}
					    );
					    message = "Show plugin test 2 screen\n";
					    break;

					case "TEST_PLUGIN_3":
					    Global.GetAndShowScreen(
						"test_plugin_3", "test_plugin",
						"screentitle", "3",
						"command_arg", "3",
						"addonmessage", "\n\n\
To work properly, this test requires that you run it under the\n\
X11 Windowing System.\
",
						"screenanchor", SOUTHWEST,
						"anchorpoint",
						new Point {
						    double x = VM.screen.width/2 + 72.0/2;
						    double y = root.location.y;
						}
					    );
					    message = "Show plugin test 3 screen\n";
					    break;
				    }
				    if (message != NULL) {
					message = "[" + date() + "] " + message;
					appendText(root.components.$_textarea, message);
				    }
				}
			    },
			    new JButton {
				String text = "Clear";
				Font   font = Global.GetPreferredButtonFont();

				actionPerformed(e) {
				    root.ClearScreen();
				}
			    },
			    new JButton {
				String text = "Dismiss";
				Font   font = Global.GetPreferredButtonFont();

				actionPerformed(e) {
				    Global.AltQueueCommand(root, &root.HideScreen);
				}
			    },
			};
		    },
		    new Dictionary {
			int gridx = 1;
			int gridy = 1;
			int weightx = 1;
		    },

		    Global.NewJCheckBox(
			"$_monospace", "Monospace", NULL, USEMONOSPACE,
			"state", USEMONOSPACE,
			"visible", SHOWMONOSPACE,
			"requestfocusenabled", FALSE,
			"itemStateChanged", ItemStateChanged
		    ),
		    LEFT,

		    new JChoice {
			String tag = "$_executechoice";
			Font   font = Global.GetPreferredChoiceFont();

			Array items = {
			    "Add Mark", "ADD_MARK",
			    "Cache Status", "CACHE_STATUS",
			    "Collect Garbage", "COLLECT_GARBAGE",
			    "Memory Usage", "MEMORY_USAGE",
			    "Ping Server", "PING_SERVER",
			    "Reset All", "RESET_ALL",
			    "Reset Cursors", "RESET_CURSORS",
			    "Reset Plugins", "RESET_PLUGINS",
			    "Reset Screens", "RESET_SCREENS",
			    "Test Plugin 1", "TEST_PLUGIN_1",
			    "Test Plugin 2", "TEST_PLUGIN_2",
			    "Test Plugin 3", "TEST_PLUGIN_3",
			};

			Function mouseWheelMoved = Global.MouseWheelMoved;
		    },
		    RIGHT,
		};
	    },
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		int    fill = HORIZONTAL;
		Insets insets = Global.GetQualifiedInsets(72.0/8, "T");
	    },

	    Global.NewJProprietaryLabel(),
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		Insets insets = Global.GetQualifiedInsets(72.0/32, "T");
	    },
	};

	////////////////////////////
	//
	// Screen Functions
	//
	////////////////////////////

	ClearScreen() {
	    components.$_textarea.text = "";
	}

	HideScreen() {
	    Global.HideScreen(this);
	}

	InitializeScreen() {
	    components.$_executechoice.selected = startup;
	    if (defined("$_monospace", components)) {
		components.$_monospace.state = usemonospace;
		components.$_monospace.visible = showmonospace;
		SyncFonts();
	    }
	}

	LoadScreen() {
	    if (autorun)
		components.$_execute.click();
	}

	SetScreenSize(Dimension sz) {
	    double w1 = components.$_monospace.preferredsize.width;
	    double w2 = components.$_executechoice.preferredsize.width;

	    sz.width = 1.1 * (
		components.$_panel.preferredsize.width +
		2.0 * (w1 > w2 ? w1 : w2)
	    );
	    size = sz;
	}


	////////////////////////////
	//
	// Miscellaneous Functions
	//
	////////////////////////////

	AppendText(String text) {
	    if (text != NULL)
		appendText(components.$_textarea, text);
	}

	SetText(String text) {
	    components.$_textarea.text = text;
	}

	SyncFonts() {
	    if (defined("$_monospace", components)) {
		if (components.$_monospace.state)
		    components.$_textarea.font = Global.GetPreferredMonospaceFont();
		else components.$_textarea.font = Global.GetPreferredTextFont();
	    }
	}
    };

    return(screen);
}

return(Builder);
