//
// A template for a simple screen the contains a JLabel, a JTextArea and
// two JButtons. This screen also includes a menubar with JMenuItems that
// define their own actionPerformed() event handlers and a windowClosing()
// event handler that uses a confirm dialog to make sure the user is ready
// to dismiss the screen.
//

import yoix.*.*;

Dictionary Global = argv[1];

Builder(String name, Array args) {

    JFrame screen = {
	Insets border = Global.GetLabeledScreenInsets();
	String title = Global.ACRONYM + " Template 3a";
	Font   font = Global.GetPreferredLabelFont();
	int    opaque = TRUE;

	//
	// This is starting screen size. Setting size to NULL is special
	// and means the individual components displayed in the screen
	// determine the size.
	//

	Dimension size = {
	    double width = 7.0*72;
	    double height = 3.0*72;
	};

	////////////////////////////
	//
	// Screen Variables
	//
	////////////////////////////

	//
	// Every screen should define and initialize the following set
	// of variables. Expect problems is you omit any of them.
	//

	String screenbuilder = global.argv[0];
	String screenname = name;
	String screentitle = NULL;
	Object anchorpoint = NULL;
	Color  screencolor = NULL;
	int    anchorstyle = AUTOMATIC;
	int    screenanchor = CENTER;
	int    initialized = FALSE;
	int    disposeonclose = TRUE;
	int    savestate = TRUE;   // save screen-specific info within session
	int    retainstate = TRUE; // save screen-class info across sessions
	int    reloadargs = FALSE;

	////////////////////////////
	//
	// MenuBar Layout
	//
	////////////////////////////

	JMenuBar menubar = {
	    Font font = Global.GetPreferredMenuFont();

	    //
	    // JMenuItems can define actionPerformed() and itemStateChanged()
	    // event handlers, which is the approach we've adotped here. The
	    // alternative (you normally don't mix the two methods) is define
	    // actionPerformed() and itemStateChanged() in the JFrame and let
	    // them handle events generated by the menubar. There's an example
	    // of this approach in another template screen.
	    //

	    Array items = {
		new JMenu {
		    String text = "File";
		    Array items = {
			new JMenuItem {
			    String text = "Open";

			    actionPerformed(e) {
				Global.ShowMessage("Handling the menubar's Open command");
			    }
			},
			NULL,
			new JMenuItem {
			    String text = "Dismiss";

			    actionPerformed(e) {
				Global.AltQueueCommand(root, &root.HideScreen);
			    }
			},
		    };
		},
		new JMenu {
		    String text = "Edit";
		    Array items = {
			new JMenuItem {
			    String text = "Undo";

			    actionPerformed(e) {
				Global.ShowUnimplemented(root);
			    }
			},
			new JMenuItem {
			    String text = "Update";

			    actionPerformed(e) {
				String text;

				text = strfmt("%s\nReceived %O\n\n", date(), e);
				fprintf(stderr, text);
				//
				// The appendText() builtin is more efficient.
				//
				root.components.$_textarea.text += text;
			    }
			},
		    };
		},
		new JMenu {
		    String text = "Help";
		    Array items = {
			new JMenuItem {
			    String text = "About";

			    actionPerformed(e) {
				Global.ShowVersion(root);
			    }
			},
		    };
		},
	    };
	};

	////////////////////////////
	//
	// Screen Layout
	//
	////////////////////////////

	GridBagLayout layoutmanager;

	Array layout = {
	    Global.NewJHeadingLabel(NULL, "A Simple Template Screen"),
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
	    },

	    //
	    // We use Global.NewJTextArea() to build the component, but you
	    // could build your own
	    //
	    //    new JTextArea {
	    //        String tag = "$_textarea";
	    //        Color  background = Global.GetPreferredTextBackground();
	    //        Color  foreground = Global.GetPreferredTextForeground();
	    //        Insets insets = Global.GetTextAreaInsets();
	    //        Object transferhandler = NULL;		// required for custom drag and drop
	    //        String text = "Change this message to whatever you want...\n";
	    //        int    opaque = TRUE;
	    //        int    rows = 0;
	    //        int    columns = 0;
	    //        int    edit = FALSE;
	    //        int    scroll = AS_NEEDED;
	    //
	    //        Function keyPressed = Global.KeyPressed;
	    //        Function dragGestureRecognized = Global.DragGestureRecognized;
	    //    },
	    //
	    // and end up JTextArea that's practically identical to the one
	    // built by Global.NewJTextArea().
	    //

	    Global.NewJTextArea(
		"$_textarea", "Change this message to whatever you want...\n", 0, 0, AS_NEEDED,
		"textwrap", 0,
		"edit", FALSE
	    ),
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
		int weightx = 1;
		int weighty = 1;
		int fill = BOTH;
	    },

	    new JPanel {
		//
		// Use GridLayout for equal size buttons and FlowLayout if
		// each button should size itself based on its label.
		//
		GridLayout layoutmanager;
		Array layout = {
		    new JButton {
			String text = "Send";
			Font   font = Global.GetPreferredButtonFont();

			actionPerformed(e) {
			    //
			    // You undoubtedly have work to do here. All we
			    // currently do is arrange to call HandleSend()
			    // (it's defined below) from the command thread
			    // rather than from Java's event thread. It's a
			    // common approach when the work we're supposed
			    // to do could take a while (e.g., contacting the
			    // server).
			    //
			    Global.QueueCommandOnce(root, &root.HandleSend);
			}
		    },
		    new JButton {
			String text = "Clear";
			Font   font = Global.GetPreferredButtonFont();

			actionPerformed(e) {
			    root.ClearScreen();
			}
		    },
		    new JButton {
			String text = "Dismiss";
			Font   font = Global.GetPreferredButtonFont();

			actionPerformed(e) {
			    Global.AltQueueCommand(root, &root.HideScreen);
			}
		    },
		};
	    },
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		Insets insets = Global.GetQualifiedInsets(72.0/8, "T");
	    },

	    Global.NewJProprietaryLabel(),
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		Insets insets = Global.GetQualifiedInsets(72.0/32, "T");
	    },
	};

	////////////////////////////
	//
	// Event Handlers
	//
	////////////////////////////

	windowClosed(e) {
	    //
	    // Screens that don't define their own windowClosed() event
	    // handler automatically get one that calls HideScreen(), so
	    // we could omit this if we wanted.
	    //

	    HideScreen();
	}

	windowClosing(e) {
	    //
	    // Returning 0 means the Yoix interpreter will dispose this
	    // screen and that will generate WindowEvent that's handled
	    // by our windowClosed() event handler.
	    //

	    return(!Global.ShowConfirm(this, "Do you really want to dismiss this screen?").confirmed);
	}

	////////////////////////////
	//
	// Screen Functions
	//
	////////////////////////////

	ClearScreen() {
	    components.$_textarea.text = "";
	}

	HideScreen() {
	    Global.HideScreen(this);
	}

	////////////////////////////
	//
	// Miscellaneous Functions
	//
	////////////////////////////

	HandleSend() {
	    //
	    // This function is eventually called when the user presses
	    // the Send button. All we do is pop up a message dialog, so
	    // you will have to change things. You probably will want to
	    // contact the server using Global.QueueCommand(), however
	    // in this case Global.RunCommand() may be more appropriate
	    // because we probably know we got here via QueueCommand()
	    // when the Send button was pressed.
	    // 

	    Global.ShowMessage(this, "This is a message from HandleSend...");
	    HideScreen();
	}
    };

    return(screen);
}

return(Builder);

