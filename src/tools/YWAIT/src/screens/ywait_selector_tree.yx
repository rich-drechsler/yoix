//
// A screen that displays values in a JTree and automatically updates the
// string stored in the text field of the parent's component that is named
// by destination. Pressing a button in the parent usually triggers a call
// of Global.ShowSelectorTree(), which handles the job of initializing parent,
// destination, and any other important fields before this screen is shown.
//

import yoix.*.*;

Dictionary Global = argv[1];

Builder(String name, Array args) {

    JFrame screen = {
	Insets border = Global.GetLabeledScreenInsets();
	Font   font = Global.GetPreferredLabelFont();
	int    opaque = TRUE;

	Dimension size = {
	    double height = 4.5*72;
	    double width = 4.0*72;
	};

	////////////////////////////
	//
	// Screen Variables
	//
	////////////////////////////

	String screenbuilder = global.argv[0];
	String screenname = name;
	String screentitle = NULL;
	Object anchorpoint = NULL;
	Color  screencolor = NULL;
	int    anchorstyle = AUTOMATIC;
	int    screenanchor = CENTER;
	int    initialized = FALSE;
	int    disposeonclose = FALSE;
	int    savestate = TRUE;   // save screen-specific info within session
	int    retainstate = TRUE; // save screen-class info across sessions
	int    reloadargs = FALSE;

	////////////////////////////
	//
	// Custom Variables
	//
	////////////////////////////

	JTreeNode top = NULL;
	String    destination = NULL;
	String	  label = NULL;
	int   	  multiplemode = SINGLE_SELECTION;

	////////////////////////////
	//
	// Screen Layout
	//
	////////////////////////////

	GridBagLayout layoutmanager;

	Array layout = {
	    Global.NewJActiveHeadingLabel("$_selectorlabel", NULL, FALSE),
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
	    },

	    new JScrollPane {
		Array layout = {
		    new JTree {
			String tag = "$_selector";
			Color  background = Global.GetPreferredTreeBackground();
			Color  foreground = Global.GetPreferredTreeForeground();
			Font   font = Global.GetPreferredTreeFont();
			int    requestfocus = TRUE;
			int    scrollsonexpand = TRUE;

			mouseClicked(MouseEvent e) {
			    JTreeNode node = item(e.location.x, e.location.y);
			    String    str;
			    Array     nodes = action(GET_SELECTED_NODES);
			    int       n;

			    if (node != NULL) {
				str = "";

				if (nodes@length > 0) {
				    qsort(nodes, sortNodes);
				    for (n = 0; n < nodes@length; n++)
					str += "," + nodes[n].text;
				    if (str@sizeof > 1)
					str = yoix.string.substring(str, 1);
				}
				root.parent.components[root.destination].text = str;
			    }
			}

			sortNodes(JTreeNode a, JTreeNode b) {
			    return(strcasecmp(a.text, b.text));
			}
		    },
		};
	    },
	    new GridBagConstraints {
		int gridwidth = REMAINDER;
		int weightx = 1;
		int weighty = 1;
		int fill = BOTH;
	    },

	    new JPanel {
		GridLayout layoutmanager;

		Array layout = {
		    new JButton {
			String text = "Clear";
			Font   font = Global.GetPreferredButtonFont();

			actionPerformed(e) {
			    root.ClearScreen();
			}
		    },
		    new JButton {
			String text = "Dismiss";
			Font   font = Global.GetPreferredButtonFont();

			actionPerformed(e) {
			    Global.AltQueueCommand(root, &root.HideScreen);
			}
		    },
		};
	    },
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		Insets insets = Global.GetQualifiedInsets(72.0/8, "T");
	    },

	    Global.NewJProprietaryLabel(),
	    new GridBagConstraints {
		int    gridwidth = REMAINDER;
		Insets insets = Global.GetQualifiedInsets(72.0/32, "T");
	    },
	};

	////////////////////////////
	//
	// Screen Functions
	//
	////////////////////////////

	ClearScreen() {
	    components.$_selector.action(SELECT_NONE);
	    if (parent != NULL)
		parent.components[destination].text = "";
	}

	HideScreen() {
	    Global.HideScreen(this);
	}

	InitializeScreen() {
	    components.$_selectorlabel.text = label;
	    components.$_selector.top = top;
	    components.$_selector.multiplemode = multiplemode;
	}

	////////////////////////////
	//
	// Miscellaneous Functions
	//
	////////////////////////////
    };

    return(screen);
}

return(Builder);
