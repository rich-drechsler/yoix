//
// A YDAT config file used to display publicly available data for
// brain cancer cases in New Mexico. YDAT config files currently
// aren't documented, but we hope that will change in an upcoming
// release. If it's important and something you want please let us
// know - user interest will certainly raise YDAT's priority.
//

CountFormatter(double count) = toString((int)count);
YearFormatter(double year) = toString((int)year);
YearFormatter2(double year1, double year2) = toString((int)year1);
YearCountFormatter(double year, double count) = new Array {toString((int)year), toString((int)count)};

//
// The yaxis definitions may eventually turn into generator functions that
// will be able to replace YAxisLoader. Not a high priority right now, so
// the brute force approach used by YAxisLoader will do for a while.
//

Array YEAR_TICKS = {1, 1, 1};
Array YEAR_LABELS = NULL;
Array COUNT_TICKS = NULL;
Array COUNT_LABELS = NULL;

//
// Callbacks used to update counter labels...
//

CounterFormatter(DataManager manager) {

    //
    // Data partitioning means we don't want to use the DataManager's
    // default count and total values because they include all records.
    // Instead we set the COUNTER column to TRUE for the "Count" field,
    // which is defined to be 1, but only for records in the partition
    // that we're interested in. You might want to experiment and see
    // what happens if you use "$_count", which is defined for all
    // records.
    //

    return(toString((int)manager.counters.Count) + " / " + toString((int)manager.totals.Count));
    ////return(toString(manager.selectedcount) + " / " + toString(manager.loadedcount));
}

//
// Next two functions improve axis labeling. Unfortunately they usually
// are called a little late when we zoom out, which sometimes can affect
// performance - we'll look into it a little later.
//

YAxisLoader(Object arg) {
    double delta = arg.axisends[1] - arg.axisends[0];

    //
    // Temporary - we will try to use Yoix functions as generators when
    // they're assigned to the ticks and labels fields of an Axis. Code
    // that supports the generators has been in the Java code for quite
    // some time, but it probably hasn't been well tested and we doubt
    // it has ever been used in a production syste.
    //

    arg.labels = NULL;
    if (delta > 200000000) {
	arg.ticks = new Array {100000000, 10, 5};
	arg.labels = new Array {"0", "100 M", "200 M", "300 M", "400 M", "500 M", "600 M", "700 M", "800 M", "900 M", 
			"1 B", "1.1 B", "1.2 B", "1.3 B", "1.4 B", "1.5 B", "1.6 B", "1.7 B", "1.8 B", "1.9 B", "2 B"};
    } else if (delta > 20000000) {
	arg.ticks = new Array {10000000, 10, 5};
	arg.labels = new Array {"0", "10 M", "20 M", "30 M", "40 M", "50 M", "60 M", "70 M", "80 M", "90 M", "100 M", 
			"110 M", "120 M", "130 M", "140 M", "150 M", "160 M", "170 M", "180 M", "190 M", "200 M"};
    } else if (delta > 2000000) {
	arg.ticks = new Array {1000000, 10, 5};
	arg.labels = new Array {"0", "1 M", "2 M", "3 M", "4 M", "5 M", "6 M", "7 M", "8 M", "9 M", "10 M",
			"11 M", "12 M", "13 M", "14 M", "15 M", "16 M", "17 M", "18 M", "19 M", "20 M"};
    } else if (delta > 200000)  {
	arg.ticks = new Array {100000, 10, 5};
	arg.labels = new Array {"0", "100 K", "200 K", "300 K", "400 K", "500 K", "600 K", "700 K", "800 K", "900 K",
			"1 M", "1.1 M", "1.2 M", "1.3 M", "1.4 M", "1.5 M", "1.6 M", "1.7 M", "1.8 M", "1.9 M", "2 M"};
    } else if (delta > 20000)
	arg.ticks = new Array {10000, 10, 5};
    else if (delta > 2000)
	arg.ticks = new Array {1000, 10, 5};
    else if (delta > 200)
	arg.ticks = new Array {100, 10, 5};
    else if (delta > 20)
	arg.ticks = new Array {10, 10, 5};
    else arg.ticks = new Array {1, 1, 1};
}

//
// Another callback function that can be used to adjust the linewidth
// used by a plot based on the data that's currently displayed. This
// was written quickly, and the support code (mostly in init.yx) can
// still use some work. Eventually should arrange to call this when
// the physical size of the plot changes, which probably can be done
// through a componentResized() event handler in init.yx - later.
//

LinewidthAdjuster(Object plot, Dictionary ends) {
    Rectangle rect;
    Insets    ipad;
    double    width;
    double    years;

    //
    // The actual width calculation should agree with the Java code that
    // always tries to leave room for one full line on the "high" side of
    // the plot. Undoubtedly should be a better way that doesn't force us
    // know about and duplicate the Java code calculations - maybe later.
    //

    if (plot != NULL && ends != NULL && ends.xaxis != NULL) {
	if ((rect = plot.viewport) != NULL) {
	    if ((ipad = plot.ipad) != NULL)
		rect.width -= ipad.left + ipad.right;
	    if ((years = (ends.xaxis[1] - ends.xaxis[0])) > 0)
		width = rect.width/(2*years + 1);
	    else width = LINEWIDTH;
	    plot.linewidth = max(LINEWIDTH, width);
	}
    }
}

//
// The rest is pretty standard stuff that's interpreted by table.yx. The
// CALLBACKS table is undoubtedly the hardest because the low level Java
// code is currently the only documentation!!
//

CONFIGVERSION = "4.1";

COLOREDBY = "Age_Group";
GRAPHSEPARATOR = " ";		// can't match INPUTSEPARATOR
INPUTSEPARATOR = "|";		// can't match GRAPHSEPARATOR - \007 may be better
////INPUTCOMMENT = "#";
LOCATIONMODE = 2;
PRIMARYLABEL = "Counts";
SECONDARYLABEL = NULL;
SORTEDBY = "main_plot";

LABEL_LONGDURATION = NULL;
LABEL_TIMESHADING = NULL;
LABEL_REVERSESHADING = NULL;
LABEL_PRESSED = NULL;
LABEL_NODES = "Counties";
LABEL_EDGES = NULL;
LABEL_NODEFILL = NULL;
TIMESHADING = FALSE;
TITLEMODEL = 1;

//
// An example Palette used by the graph - we expect you will want to
// make improvements.
//

Palette GRAPH_PALETTE = {
    Array colors = {
	Color.cyan,
	getHSBColor(0.30, 0.50, 1.0),
	getHSBColor(0.15, 0.50, 1.0),
	5,
	getHSBColor(0.10, 0.50, 1.0),
	10,
	getHSBColor(0.05, 0.55, 1.0),
	15,
	getHSBColor(0.04, 0.55, 1.0),
	25,
	getHSBColor(0.04, 0.60, 1.0),
	40,
	getHSBColor(0.03, 0.65, 1.0),
	50,
	getHSBColor(0.03, 0.70, 1.0),
	60,
	getHSBColor(0.02, 0.80, 1.0),
	75,
	getHSBColor(0.02, 0.90, 1.0),
	90,
	getHSBColor(0.01, 1.0, 1.0),
	95,
	getHSBColor(0.00, 1.0, 1.0),
	99,
	Color.magenta,
    };
};

//
// Small adjustments to the default sizes. HISTOGRAM and PLOTFILTER
// are adjust together, mostly because STARTSCREENS uses the default
// widths.
//

DIMENSIONS.HISTOGRAM.width += 36;
DIMENSIONS.PLOTFILTER.width -= 36;

//
// This is how to set defaults (e.g., white background) while still
// letting command line options win. It's rather complicated because
// we need to override choices made in setup.yx, which is included
// before this file.
//

COLORS = MODELS.MergeColors(new Array[] {"WHITE", unroll(MODEL)});

//
// Spacing used around the main plot.
//

Insets PLOT_PAD = {
    double left = 5;
    double right = 5;
    double top = 3;
    double bottom = 3;
};

TRANSLATORS = new Dictionary {
    Dictionary age_trans[] = {
	"1", "0-4",
	"2", "5-9",
	"3", "10-14",
	"4", "15-19",
	"5", "20-24",
	"6", "25-29",
	"7", "30-34",
	"8", "35-39",
	"9", "40-44",
	"10", "45-49",
	"11", "50-54",
	"12", "55-59",
	"13", "60-64",
	"14", "65-69",
	"15", "70-74",
	"16", "75-79",
	"17", "80-85",
	"18", "85+",
	"", "Other",
    };

    Dictionary age_sorter[] = {
	"0-4",   "01",
	"5-9",   "02",
	"10-14", "03",
	"15-19", "04",
	"20-24", "05",
	"25-29", "06",
	"30-34", "07",
	"35-39", "08",
	"40-44", "09",
	"45-49", "10",
	"50-54", "11",
	"55-59", "12",
	"60-64", "13",
	"65-69", "14",
	"70-74", "15",
	"75-79", "16",
	"80-85", "17",
	"85+",   "18",
    };

    Dictionary case_trans[] = {
	"cas", "Yes",
	"",    "No",
    };

    Dictionary race_trans[] = {
        "1", "White",
        "2", "Black",
        "",  "Other",
    };
   
    Dictionary gender_trans[] = {
        "1", "Male",
        "2", "Female",
        "",  "Other",
    };
   
    Dictionary unknown[] = {
	"\0", "unknown",	// this matches empty field
    };
};

DATAFIELDS = new Array {
//
// NAME                   TYPE           INDEX   COUNTER  UNIXTIME   TRANSLATOR      GENERATOR
// ----                   ----           -----   -------  --------   ----------      ---------
   "$_graph",             DATA_STRING,     0,    FALSE,   NULL,      NULL,           NULL,
   "$_partition",         DATA_INTEGER,    1,    FALSE,   NULL,      NULL,           NULL,

   //
   // Should be safe to apply translators and set types because these fields
   // are only used by one partition.
   //

   "$_Measure",           DATA_STRING,     2,    FALSE,   NULL,      "case_trans",   NULL,
   "$_Count",             DATA_INTEGER,    3,    FALSE,   NULL,      NULL,           NULL,
   "$_County",            DATA_STRING,     4,    FALSE,   NULL,      NULL,           NULL,
   "$_Year",              DATA_INTEGER,    5,    FALSE,   NULL,      NULL,           NULL,
   "$_Age_Group",         DATA_STRING,     6,    FALSE,   NULL,      "age_trans",    NULL,
   "$_Race",              DATA_STRING,     7,    FALSE,   NULL,      "race_trans",   NULL,
   "$_Gender",            DATA_STRING,     8,    FALSE,   NULL,      "gender_trans", NULL,

   //
   // We eventually will try to come up with a simpler approach.
   //

   "Measure",             DATA_PARTITION,  -1,   FALSE,   NULL,      NULL,           new Array {"$_Measure", "$_partition", 1, "=="},
   "Count",               DATA_PARTITION,  -1,   TRUE,    NULL,      NULL,           new Array {"$_Count", "$_partition", 1, "=="},
   "County",              DATA_PARTITION,  -1,   FALSE,   NULL,      NULL,           new Array {"$_County", "$_partition", 1, "=="},
   "Year",                DATA_PARTITION,  -1,   FALSE,   NULL,      NULL,           new Array {"$_Year", "$_partition", 1, "=="},
   "Age_Group",           DATA_PARTITION,  -1,   FALSE,   NULL,      NULL,           new Array {"$_Age_Group", "$_partition", 1, "=="},
   "Race",                DATA_PARTITION,  -1,   FALSE,   NULL,      NULL,           new Array {"$_Race", "$_partition", 1, "=="},
   "Gender",              DATA_PARTITION,  -1,   FALSE,   NULL,      NULL,           new Array {"$_Gender", "$_partition", 1, "=="},
};

HISTOGRAMS = new Array {
//
// NAME                 MENULABEL            PRIMARY              SECONDARY      DIVERSITY  AUTOREADY  SPAN  SORTBY          EXTRA
// ----                 ---------            -------              ---------      ---------  ---------  ----  ------          -----
   "Count",              "Count",            "Count",             NULL,          NULL,      FALSE,     0,    SORTBY_NUMBER,  NULL,
   "County",             "County",           "County",            NULL,          NULL,      FALSE,     0,    SORTBY_TEXT,    NULL,
   "Year",               "Year",             "Year",              NULL,          NULL,      FALSE,     0,    SORTBY_TEXT,    NULL,
   "Age_Group",          "Age Group",        "Age_Group",         NULL,          NULL,      FALSE,     0,    "age_sorter",   NULL,
   "Race",               "Race",             "Race",              NULL,          NULL,      FALSE,     0,    SORTBY_TEXT,    NULL,
   "Gender",             "Gender",           "Gender",            NULL,          NULL,      FALSE,     0,    SORTBY_TEXT,    NULL,
};

SWEEPTABLES = new Array {
//
// NAME            MENULABEL        REORDER  RESIZE   EXTRA  COLUMNS
// ----            ---------        -------  ------   -----  -------
   "data_detail",  "Data Detail",   TRUE,    TRUE,    NULL,  new Array {
        //
        // DATAFIELD             LABEL           SPAN  ALIGNMENT  TYPE          ATTRIBUTES         EXTRA
        // ---------             -----           ----  ---------  ----          ----------         -----
	   "Year",               "Year",           5,  CENTER,    STRING_TYPE,  NULL,              NULL,
	   "Measure",            "Case",           5,  CENTER,    STRING_TYPE,  NULL,              NULL,
	   "Age_Group",          "Age",            7,  CENTER,    STRING_TYPE,  NULL,              NULL,
	   "Race",               "Race",           8,  CENTER,    STRING_TYPE,  NULL,              NULL,
	   "Gender",             "Gender",         8,  CENTER,    STRING_TYPE,  NULL,              NULL,
	   "County",             "County",        15,  LEFT,      STRING_TYPE,  NULL,              NULL,
    },
};

GRAPHS = new Array {
//
// NAME           MENULABEL  PRIMARY     SECONDARY  COLOREDBY  AUTOREADY  LINEWIDTH  BORDER  INSETS  PAD  PALETTE        EXTRA
// ----           ---------  -------     ---------  ---------  ---------  ---------  ------  ------  ---  -------        -----
   "main_graph",  "Graph",   "$_graph",  NULL,      NULL,      FALSE,     LINEWIDTH,  0,      0,     0,   GRAPH_PALETTE, NULL,
};

STACKS = new Array {
//
// NAME          MENULABEL  VISIBLE  OWNER  XVALUE         YVALUE    FILTER          AUTOREADY  ANCHOR  BORDER  INSETS  PAD        EXTRA
// ----          ---------  -------  -----  ------         ------    ------          ---------  ------  ------  ------  ---        -----
   "main_plot",  NULL,      TRUE,    NULL,  "Year",        "Count", "data_detail",   FALSE,     SOUTH,  2,      2,      PLOT_PAD,  NULL,
};

AXES = new Array {
//
// NAME           MENULABEL  VISIBLE  OWNER         ROWS  COLUMNS  ANCHOR  INVERTED  TICKINTERVALS  TICKLABELS     EXTRA
// ----           ---------  -------  -----         ----  -------  ------  --------  -------------  ----------     -----
   "main_xaxis",  NULL,      TRUE,    "main_plot",  1,    1,       NORTH,  FALSE,    YEAR_TICKS,    YEAR_LABELS,   NULL,
   "main_yaxis",  NULL,      TRUE,    "main_plot",  1,    5,       EAST,   FALSE,    COUNT_TICKS,   COUNT_LABELS,  NULL,
};

LABELS = new Array {
//
// NAME                  MENULABEL  VISIBLE  OWNER           ROWS  COLUMNS  ALIGNMENT  FONT               FOREGROUND          TEXT
// ----                  ---------  -------  -----           ----  -------  ---------  ----               ----------          ----
   "counter_label",      NULL,      TRUE,    "main_plot",    1,    60,      RIGHT,     NULL,              NULL,               NULL,
   "info_label",         NULL,      TRUE,    "main_plot",    1,    60,      LEFT,      NULL,              COLORS.sweepcolor,  NULL,
   "start_label",        NULL,      TRUE,    "main_plot",    1,    25,      LEFT,      NULL,              NULL,               NULL,
   "end_label",          NULL,      TRUE,    "main_plot",    1,    25,      RIGHT,     NULL,              NULL,               NULL,
};

PANELS = new Array {
//
// NAME           MENULABEL  VISIBLE    OWNER  WIDTH  HEIGHT  BACKGROUND    LAYOUT
// ----           ---------  -------    -----  -----  ------  ----------    ------

   "main_panel",  NULL,      TRUE,      NULL,    0,      0,   NULL,         new Array {
        //
        // NAME            GRIDX  GRIDY  GRIDWIDTH  GRIDHEIGHT  WEIGHTX  WEIGHTY   IPADX     IPADY     FILL      ANCHOR   INSETS       BACKGROUND
        // ----            -----  -----  ---------  ----------  -------  -------   -----     -----     ----      ------   ------       ----------
           NULL,             0,     0,       1,          1,         0,       0,    72.0/8,   72.0/8,   NONE,     CENTER,  NULL,        NULL,
           "counter_label",  8,     1,       1,          1,         0,       0,    0,        0,        NONE,     EAST,    NULL,        NULL,
           "main_yaxis",     2,     3,       1,          1,         0,       0,    0,        0,        BOTH,     CENTER,  "main_plot", NULL,
           "main_plot",      3,     3,       6,          1,       100,     100,    0,        0,        BOTH,     CENTER,  NULL,        NULL,
           "main_xaxis",     3,     7,       6,          1,       100,       0,    0,        0,        BOTH,     CENTER,  "main_plot", NULL,
           "start_label",    3,     8,       1,          1,         0,       0,    0,        0,        NONE,     WEST,    NULL,        NULL,
           "end_label",      8,     8,       1,          1,         0,       0,    0,        0,        NONE,     EAST,    NULL,        NULL,
           "info_label",     3,     9,       6,          1,       100,       0,    0,        0,        BOTH,     CENTER,  NULL,        NULL,
           NULL,             10,    10,      1,          1,         0,       0,    72.0/8,   72.0/32,  NONE,     CENTER,  NULL,        NULL,
   },
};

CALLBACKS = new Array {
//
// OWNER              STATE          FORMATTER                LABEL                 CALLBACK
// -----              ------         ----------               -----                 --------
   "main_xaxis",      "SELECT",      YearFormatter,           "info_label",         NULL,
   "main_xaxis",      "SETSTART",    YearFormatter2,          "start_label",        NULL,
   "main_xaxis",      "SETEND",      YearFormatter2,          "end_label",          NULL,
   "main_yaxis",      "SELECT",      CountFormatter,          "info_label",         NULL,
   "main_yaxis",      "SETEND",      NULL,                    NULL,                 YAxisLoader,
   "main_plot",       "POINT",       YearCountFormatter,      "info_label",         NULL,
   "main_plot",       "SWEEP",       YearCountFormatter,      "info_label",         NULL,
   "main_plot",       "SELECT",      YearCountFormatter,      "info_label",         NULL,

   "main_plot",       "ADJUST",      NULL,                    NULL,                 LinewidthAdjuster,

   "datamanager",     "LOAD",        CounterFormatter,        "counter_label",      NULL,
   "datamanager",     "UPDATE",      CounterFormatter,        "counter_label",      NULL,

   //
   // There's much more we can do here, but you'll definitely need help!!
   //
};

//
// Ugly positioning and sizing, but it wouldn't be hard to simplify. First
// two numbers position the sceen; last two determine the screen's size.
//

STARTSCREENS = new Array {
   "main_panel",
	0,
	0,
	VM.screen.width - DIMENSIONS.HISTOGRAM.width - 2*SEPARATION,
	0.4*VM.screen.height - SEPARATION,
   "Age_Group",
	VM.screen.width - DIMENSIONS.HISTOGRAM.width - SEPARATION, 
	0,
	DIMENSIONS.HISTOGRAM.width,
	0.4*VM.screen.height - SEPARATION,
   "main_graph",
	0,
	0.4*VM.screen.height + SEPARATION,
	0.6*VM.screen.height - 72.0/2,
	0.6*VM.screen.height - 72.0/2,
   "data_detail",
	0.6*VM.screen.height - 72.0/2 + SEPARATION,
	0.4*VM.screen.height + SEPARATION,
	VM.screen.width - DIMENSIONS.HISTOGRAM.width - 2*SEPARATION - 0.6*VM.screen.height + 72.0/2,
	0.6*VM.screen.height - 72.0/2,
};

