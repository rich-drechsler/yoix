/*
 *  This software may only be used by you under license from AT&T Corp.
 *  ("AT&T").  A copy of AT&T's Source Code Agreement is available at
 *  AT&T's Internet website having the URL:
 *
 *    <http://www.research.att.com/sw/tools/yoix/license/source.html>
 *
 *  If you received this software without first entering into a license
 *  with AT&T, you have an infringing copy of this software and cannot
 *  use it without violating AT&T's intellectual property rights.
 */

//
// DOT grammar written for WebGain's JavaCC parser generator (Version 1.1).
// Also seems to work with Version 2.0, but we haven't done much testing as
// of 09/10/01.
//

options {
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_LOOKAHEAD = false;
    FORCE_LA_CHECK = false;

    STATIC = false;
    NODE_USES_PARSER = true;

    //
    // Need our own CharStream class for better control when we switch
    // input streams, so these are no longer optional.
    //
    USER_CHAR_STREAM = true;
    JAVA_UNICODE_ESCAPE = false;
}

PARSER_BEGIN(DOTParser)

package att.research.yoix;
import java.io.*;
import java.util.*;

class DOTParser

{
    private Token             digraph = null;

    private YoixParserStream  parserstream = null;
    private boolean           addtags = false;

    private final YoixVM  VM = YoixConstants.VM;
    private final String  NL = YoixConstants.NL;
    private final String  SYNTAXERROR = YoixConstantsErrorName.SYNTAXERROR;
    private final String  INTERNALERROR = YoixConstantsErrorName.INTERNALERROR;
    private final int     YOIX_EOF = YoixConstants.YOIX_EOF;

    ///////////////////////////////////
    //
    // Private Methods
    //
    ///////////////////////////////////

    private YoixObject
    abort(String error) {

	return(abort(error, null));
    }


    private YoixObject
    abort(String error, ParseException e) {

	ArrayList  args = new ArrayList();
	String     token;
	String     expected;
	String     sep;
	Token      tok;
	int        line;
	int        column;
	int        m;
	int        n;

	//
	// Wanted better control over parser error messages, primarily
	// for consistency, so this routine is now a slightly modified
	// version of ParseException.getMessage(). Change JavaCC and
	// you may have to do some work here as well.
	//

	token_source.inError = true;

	if (e != null && e.currentToken != null) {
	    line = e.currentToken.next.beginLine;
	    column = e.currentToken.next.beginColumn;
	    args.add("Encountered");
	    token = "\"";
	    sep = "";
	    for (tok = e.currentToken.next; tok != null; tok = tok.next) {
		if (tok.kind == 0) {
		    token += sep + tokenImage[0];
		    break;
		} else token += sep + e.add_escapes(tok.image);
		sep = " ";
	    }
	    token += "\"";
	    args.add(token);
	    args.add(NL);
	    expected = NL + "    Parser was looking for one of the following tokens:" + NL;
	    for (n = 0; n < e.expectedTokenSequences.length; n++) {
		sep = "\t";
		for (m = 0; m < e.expectedTokenSequences[n].length; m++) {
		    expected += sep + e.tokenImage[e.expectedTokenSequences[n][m]];
		    sep = " ";
		}
		if (m > 0) {
		    if (e.expectedTokenSequences[n][m - 1] != 0)
			expected += sep + "...";
		    expected += NL;
		}
	    }
	    args.add(expected);
	} else {		// should be unnecessary - later
	    if (e != null)
		args.add(e.getMessage());
	    line = parserstream.getBeginLine();
	    column = parserstream.getBeginColumn();
	}

	VM.pushTag(line, column, parserstream.getName());
	return(VM.abort(error, args, e));
    }


    private void
    buildGraph(SimpleNode node, int type) {

	node.setType(type);

	switch(type) {
	    case _ATTRIBUTE:
	    case _EDGE:
	    case _EDGE_ATTRIBUTES:
	    case _GRAPH:
	    case _GRAPH_ATTRIBUTES:
	    case _NODE:
	    case _NODE_ATTRIBUTES:
	    case _SUBGRAPH:
		tagTop();
		break;
	}
    }


    private void
    buildGraph(SimpleNode node, int type, Token tok) {

	if (tok != null)
	    node.value = new Object[] {fixID(tok.image)};
	buildGraph(node, type);
    }


    private YoixObject
    die(String error) {

	return(VM.die(error));
    }


    private void
    restore() {

	if (parserstream != null) {
	    parserstream = parserstream.getParent();
	    ReInit(parserstream);
	}
    }


    private void
    reset(YoixParserStream stream, boolean tags) {

	stream.setParent(parserstream);
	parserstream = stream;
	ReInit(parserstream);

	addtags = tags;

	token_source.SwitchTo(DEFAULT);
	token_source.inError = false;
    }


    private void
    tagTop() {

	SimpleNode  node;
	String      source;
	int         line;
	int         column;

	if (addtags) {
	    node = (SimpleNode)jjtree.peekNode();
	    line = (token != null) ? token.beginLine : parserstream.getBeginLine();
	    column = (token != null) ? token.beginColumn : parserstream.getBeginColumn();
	    source = parserstream.getName();
	    if (node.value[0] instanceof SimpleNode) {
		node.jjtInsertChild(YoixObject.newTag(line, column, source), 0);
	    } else {
		Object val = node.value[0];
		node.value[0] = YoixObject.newTag(line, column, source);
		node.jjtAppendChild(new SimpleNode(_SELF, val));
	    }
	}
    }


    // removes double quotes and backslash-eol instances
    private String
    fixID(String input) {

	char[]  array;
	int     off, ptr, end, pos;

	if (input != null && (end = input.length()) > 1) {
	    array = input.toCharArray();
	    if (array[0] == '"' && array[end-1] == '"') {
		pos = off = ptr = 1;
		end--;
	    } else pos = off = ptr = 0;
	    while(ptr < end) {
		if (array[ptr] == '\\' && (ptr+1) < end && (array[ptr+1] == '\r' || array[ptr+1] == '\n')) {
		    if (ptr+2 < end && array[ptr+2] == '\n' && array[ptr+1] == '\r')
			ptr += 3;
		    else 
			ptr += 2;
		} else if (ptr != pos) {
		    array[pos++] = array[ptr++];
		} else {
		    pos++;
		    ptr++;
		}
	    }
	    if (pos == off)
		input = "";
	    else input = new String(array, off, pos - off);
	}
	return(input);
    }
}

PARSER_END(DOTParser)

// ================================================================

TOKEN_MGR_DECLS:
{
    boolean            inError = false;

    private final String  INTERNALERROR = YoixConstantsErrorName.INTERNALERROR;



}

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
   "//" : IN_SINGLE_LINE_COMMENT
 | "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN : {
    <#$BASECHAR: (
	["\u0041"-"\u005A"] | ["\u0061"-"\u007A"] |
	["\u00C0"-"\u00D6"] | ["\u00D8"-"\u00F6"] |
	["\u00F8"-"\u00FF"] | ["\u0100"-"\u0131"] |
	["\u0134"-"\u013E"] | ["\u0141"-"\u0148"] |
	["\u014A"-"\u017E"] | ["\u0180"-"\u01C3"] |
	["\u01CD"-"\u01F0"] | ["\u01F4"-"\u01F5"] |
	["\u01FA"-"\u0217"] | ["\u0250"-"\u02A8"] |
	["\u02BB"-"\u02C1"] | "\u0386" | ["\u0388"-"\u038A"] |
	"\u038C" | ["\u038E"-"\u03A1"] | ["\u03A3"-"\u03CE"] |
	["\u03D0"-"\u03D6"] | "\u03DA" | "\u03DC" | "\u03DE" |
	"\u03E0" | ["\u03E2"-"\u03F3"] | ["\u0401"-"\u040C"] |
	["\u040E"-"\u044F"] | ["\u0451"-"\u045C"] |
	["\u045E"-"\u0481"] | ["\u0490"-"\u04C4"] |
	["\u04C7"-"\u04C8"] | ["\u04CB"-"\u04CC"] |
	["\u04D0"-"\u04EB"] | ["\u04EE"-"\u04F5"] |
	["\u04F8"-"\u04F9"] | ["\u0531"-"\u0556"] | "\u0559" |
	["\u0561"-"\u0586"] | ["\u05D0"-"\u05EA"] |
	["\u05F0"-"\u05F2"] | ["\u0621"-"\u063A"] |
	["\u0641"-"\u064A"] | ["\u0671"-"\u06B7"] |
	["\u06BA"-"\u06BE"] | ["\u06C0"-"\u06CE"] |
	["\u06D0"-"\u06D3"] | "\u06D5" | ["\u06E5"-"\u06E6"] |
	["\u0905"-"\u0939"] | "\u093D" | ["\u0958"-"\u0961"] |
	["\u0985"-"\u098C"] | ["\u098F"-"\u0990"] |
	["\u0993"-"\u09A8"] | ["\u09AA"-"\u09B0"] | "\u09B2" |
	["\u09B6"-"\u09B9"] | ["\u09DC"-"\u09DD"] |
	["\u09DF"-"\u09E1"] | ["\u09F0"-"\u09F1"] |
	["\u0A05"-"\u0A0A"] | ["\u0A0F"-"\u0A10"] |
	["\u0A13"-"\u0A28"] | ["\u0A2A"-"\u0A30"] |
	["\u0A32"-"\u0A33"] | ["\u0A35"-"\u0A36"] |
	["\u0A38"-"\u0A39"] | ["\u0A59"-"\u0A5C"] | "\u0A5E" |
	["\u0A72"-"\u0A74"] | ["\u0A85"-"\u0A8B"] | "\u0A8D" |
	["\u0A8F"-"\u0A91"] | ["\u0A93"-"\u0AA8"] |
	["\u0AAA"-"\u0AB0"] | ["\u0AB2"-"\u0AB3"] |
	["\u0AB5"-"\u0AB9"] | "\u0ABD" | "\u0AE0" |
	["\u0B05"-"\u0B0C"] | ["\u0B0F"-"\u0B10"] |
	["\u0B13"-"\u0B28"] | ["\u0B2A"-"\u0B30"] |
	["\u0B32"-"\u0B33"] | ["\u0B36"-"\u0B39"] |
	"\u0B3D" | ["\u0B5C"-"\u0B5D"] | ["\u0B5F"-"\u0B61"] |
	["\u0B85"-"\u0B8A"] | ["\u0B8E"-"\u0B90"] |
	["\u0B92"-"\u0B95"] | ["\u0B99"-"\u0B9A"] | "\u0B9C" |
	["\u0B9E"-"\u0B9F"] | ["\u0BA3"-"\u0BA4"] |
	["\u0BA8"-"\u0BAA"] | ["\u0BAE"-"\u0BB5"] |
	["\u0BB7"-"\u0BB9"] | ["\u0C05"-"\u0C0C"] |
	["\u0C0E"-"\u0C10"] | ["\u0C12"-"\u0C28"] |
	["\u0C2A"-"\u0C33"] | ["\u0C35"-"\u0C39"] |
	["\u0C60"-"\u0C61"] | ["\u0C85"-"\u0C8C"] |
	["\u0C8E"-"\u0C90"] | ["\u0C92"-"\u0CA8"] |
	["\u0CAA"-"\u0CB3"] | ["\u0CB5"-"\u0CB9"] | "\u0CDE" |
	["\u0CE0"-"\u0CE1"] | ["\u0D05"-"\u0D0C"] |
	["\u0D0E"-"\u0D10"] | ["\u0D12"-"\u0D28"] |
	["\u0D2A"-"\u0D39"] | ["\u0D60"-"\u0D61"] |
	["\u0E01"-"\u0E2E"] | "\u0E30" | ["\u0E32"-"\u0E33"] |
	["\u0E40"-"\u0E45"] | ["\u0E81"-"\u0E82"] | "\u0E84" |
	["\u0E87"-"\u0E88"] | "\u0E8A" | "\u0E8D" |
	["\u0E94"-"\u0E97"] | ["\u0E99"-"\u0E9F"] |
	["\u0EA1"-"\u0EA3"] | "\u0EA5" | "\u0EA7" |
	["\u0EAA"-"\u0EAB"] | ["\u0EAD"-"\u0EAE"] | "\u0EB0" |
	["\u0EB2"-"\u0EB3"] | "\u0EBD" | ["\u0EC0"-"\u0EC4"] |
	["\u0F40"-"\u0F47"] | ["\u0F49"-"\u0F69"] |
	["\u10A0"-"\u10C5"] | ["\u10D0"-"\u10F6"] | "\u1100" |
	["\u1102"-"\u1103"] | ["\u1105"-"\u1107"] | "\u1109" |
	["\u110B"-"\u110C"] | ["\u110E"-"\u1112"] | "\u113C" |
	"\u113E" | "\u1140" | "\u114C" | "\u114E" | "\u1150" |
	["\u1154"-"\u1155"] | "\u1159" | ["\u115F"-"\u1161"] |
	"\u1163" | "\u1165" | "\u1167" | "\u1169" |
	["\u116D"-"\u116E"] | ["\u1172"-"\u1173"] | "\u1175" |
	"\u119E" | "\u11A8" | "\u11AB" | ["\u11AE"-"\u11AF"] |
	["\u11B7"-"\u11B8"] | "\u11BA" | ["\u11BC"-"\u11C2"] |
	"\u11EB" | "\u11F0" | "\u11F9" | ["\u1E00"-"\u1E9B"] |
	["\u1EA0"-"\u1EF9"] | ["\u1F00"-"\u1F15"] |
	["\u1F18"-"\u1F1D"] | ["\u1F20"-"\u1F45"] |
	["\u1F48"-"\u1F4D"] | ["\u1F50"-"\u1F57"] | "\u1F59" |
	"\u1F5B" | "\u1F5D" | ["\u1F5F"-"\u1F7D"] |
	["\u1F80"-"\u1FB4"] | ["\u1FB6"-"\u1FBC"] | "\u1FBE" |
	["\u1FC2"-"\u1FC4"] | ["\u1FC6"-"\u1FCC"] |
	["\u1FD0"-"\u1FD3"] | ["\u1FD6"-"\u1FDB"] |
	["\u1FE0"-"\u1FEC"] | ["\u1FF2"-"\u1FF4"] |
	["\u1FF6"-"\u1FFC"] | "\u2126" | ["\u212A"-"\u212B"] |
	"\u212E" | ["\u2180"-"\u2182"] | ["\u3041"-"\u3094"] |
	["\u30A1"-"\u30FA"] | ["\u3105"-"\u312C"] |
	["\uAC00"-"\uD7A3"]
    )>
  | <#$IDEOGRAPHIC: (
	["\u4E00"-"\u9FA5"] | "\u3007" | ["\u3021"-"\u3029"]
    )>
  | <#$COMBINING_CHAR: (
	["\u0300"-"\u0345"] | ["\u0360"-"\u0361"] |
	["\u0483"-"\u0486"] | ["\u0591"-"\u05A1"] |
	["\u05A3"-"\u05B9"] | ["\u05BB"-"\u05BD"] | "\u05BF" |
	["\u05C1"-"\u05C2"] | "\u05C4" | ["\u064B"-"\u0652"] |
	"\u0670" | ["\u06D6"-"\u06DC"] | ["\u06DD"-"\u06DF"] |
	["\u06E0"-"\u06E4"] | ["\u06E7"-"\u06E8"] |
	["\u06EA"-"\u06ED"] | ["\u0901"-"\u0903"] | "\u093C" |
	["\u093E"-"\u094C"] | "\u094D" | ["\u0951"-"\u0954"] |
	["\u0962"-"\u0963"] | ["\u0981"-"\u0983"] |
	"\u09BC" | "\u09BE" | "\u09BF" | ["\u09C0"-"\u09C4"] |
	["\u09C7"-"\u09C8"] | ["\u09CB"-"\u09CD"] | "\u09D7" |
	["\u09E2"-"\u09E3"] | "\u0A02" | "\u0A3C" | "\u0A3E" |
	"\u0A3F" | ["\u0A40"-"\u0A42"] | ["\u0A47"-"\u0A48"] |
	["\u0A4B"-"\u0A4D"] | ["\u0A70"-"\u0A71"] |
	["\u0A81"-"\u0A83"] | "\u0ABC" | ["\u0ABE"-"\u0AC5"] |
	["\u0AC7"-"\u0AC9"] | ["\u0ACB"-"\u0ACD"] |
	["\u0B01"-"\u0B03"] | "\u0B3C" | ["\u0B3E"-"\u0B43"] |
	["\u0B47"-"\u0B48"] | ["\u0B4B"-"\u0B4D"] |
	["\u0B56"-"\u0B57"] | ["\u0B82"-"\u0B83"] |
	["\u0BBE"-"\u0BC2"] | ["\u0BC6"-"\u0BC8"] |
	["\u0BCA"-"\u0BCD"] | "\u0BD7" | ["\u0C01"-"\u0C03"] |
	["\u0C3E"-"\u0C44"] | ["\u0C46"-"\u0C48"] |
	["\u0C4A"-"\u0C4D"] | ["\u0C55"-"\u0C56"] |
	["\u0C82"-"\u0C83"] | ["\u0CBE"-"\u0CC4"] |
	["\u0CC6"-"\u0CC8"] | ["\u0CCA"-"\u0CCD"] |
	["\u0CD5"-"\u0CD6"] | ["\u0D02"-"\u0D03"] |
	["\u0D3E"-"\u0D43"] | ["\u0D46"-"\u0D48"] |
	["\u0D4A"-"\u0D4D"] | "\u0D57" | "\u0E31" |
	["\u0E34"-"\u0E3A"] | ["\u0E47"-"\u0E4E"] |
	"\u0EB1" | ["\u0EB4"-"\u0EB9"] | ["\u0EBB"-"\u0EBC"] |
	["\u0EC8"-"\u0ECD"] | ["\u0F18"-"\u0F19"] |
	"\u0F35" | "\u0F37" | "\u0F39" | "\u0F3E" |
	"\u0F3F" | ["\u0F71"-"\u0F84"] | ["\u0F86"-"\u0F8B"] |
	["\u0F90"-"\u0F95"] | "\u0F97" | ["\u0F99"-"\u0FAD"] |
	["\u0FB1"-"\u0FB7"] | "\u0FB9" | ["\u20D0"-"\u20DC"] |
	"\u20E1" | ["\u302A"-"\u302F"] | "\u3099" | "\u309A"
    )>
  | <#$DIGIT: (
	["\u0030"-"\u0039"] | ["\u0660"-"\u0669"] |
	["\u06F0"-"\u06F9"] | ["\u0966"-"\u096F"] |
	["\u09E6"-"\u09EF"] | ["\u0A66"-"\u0A6F"] |
	["\u0AE6"-"\u0AEF"] | ["\u0B66"-"\u0B6F"] |
	["\u0BE7"-"\u0BEF"] | ["\u0C66"-"\u0C6F"] |
	["\u0CE6"-"\u0CEF"] | ["\u0D66"-"\u0D6F"] |
	["\u0E50"-"\u0E59"] | ["\u0ED0"-"\u0ED9"] |
	["\u0F20"-"\u0F29"]
    )>
  | <#$EXTENDER: (
	"\u00B7" | "\u02D0" | "\u02D1" | "\u0387" | "\u0640" |
	"\u0E46" | "\u0EC6" | "\u3005" | ["\u3031"-"\u3035"] |
	["\u309D"-"\u309E"] | ["\u30FC"-"\u30FE"]
    )>
  | <#$LETTER: (<$BASECHAR> | <$IDEOGRAPHIC>)>
  | <#$NAMECHAR: (
	<$LETTER> | <$DIGIT> | "_" |
	<$COMBINING_CHAR> | <$EXTENDER>
    )>
  | <#$NAME: (<$LETTER> | "_") (<$NAMECHAR>)*>
  | <#$NUMBER: ( ("-")? (((<$DIGIT>)+("." (<$DIGIT>)*)?) | ("."(<$DIGIT>)+)) )>
  | <#$ID: (<$NAME> | <$NUMBER> | ( "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
	   ( ["\u0020"-"\u007E", "\n", "\r" ] | "\r\n" )
          )
      )* "\"" ) ) >
  | <#$HTML: ( "<" ( "<" (~[">"])* ">" (~["<", ">"])* )* ">" ) >
}

TOKEN [IGNORE_CASE] : {
    <DIGRAPH_KYWD: ( "digraph" )>
  | <EDGE_KYWD: ( "edge" )>
  | <GRAPH_KYWD: ( "graph" )>
  | <NODE_KYWD: ( "node" )>
  | <STRICT_KYWD: ( "strict" )>
  | <SUBGRAPH_KYWD: ( "subgraph" )>
  | <UNDIRECTED_EDGE: ( "--" )>
  | <DIRECTED_EDGE: ( "->" )>
  | <EQ: ( "=" )>
  | <SEMI: ( ";" )>
  | <COLON: ( ":" )>
  | <COMMA: ( "," )>
  | <ATSIGN: ( "@" )>
  | <LBRACE: ( "{" )>
  | <RBRACE: ( "}" )>
  | <LPAREN: ( "(" )>
  | <RPAREN: ( ")" )>
  | <LBRACK: ( "[" )>
  | <RBRACK: ( "]" )>
}

TOKEN : {
    <ID: <$ID>> 
}

TOKEN : {
    <HTML: <$HTML>> 
}


<Dummy_State> TOKEN: {
    <_ATTRIBUTE: "ATTRIBUTE">
  | <_BODY: "BODY">
  | <_COMPASS: "COMPASS">
  | <_DIGRAPH: "DIGRAPH">
  | <_EDGE: "EDGE">
  | <_EDGE_ATTRIBUTES: "EDGE_ATTRIBUTES">
  | <_FOLDER: "FOLDER"> // used in Yoix.java
  | <_GRAPH: "GRAPH">
  | <_GRAPH_ATTRIBUTES: "GRAPH_ATTRIBUTES">
  | <_NAME: "NAME">
  | <_NODE: "NODE">
  | <_NODE_ATTRIBUTES: "NODE_ATTRIBUTES">
  | <_OTHER: "OTHER">
  | <_PORT: "PORT">
  | <_SELF: "SELF">
  | <_STRICT: "STRICT">
  | <_SUBGRAPH: "SUBGRAPH">
  | <_VALUE: "VALUE">
}

//
// Everything else, so we get errors from the parser instead of the
// token manager.
//

<*> TOKEN : {<UNMATCHEDTOKEN : ~[]>}

//
// Last token number assigned by the parser.
//

<Dummy_State> TOKEN : {<LASTTOKEN : "LASTTOKEN">}

//
// Entry point for graoh parsing.
//

SimpleNode
parseGraph(YoixParserStream stream, boolean tags) #void : {
    reset(stream, tags);
    digraph = null;
}
{
    try {
	Graph()
	{
	    Token tok = getToken(1);
	    if (tok != null && tok.image.length() > 0)
		stream.backup(getToken(1).image.length());
	    return((SimpleNode)jjtree.popNode());
	}
    }
    catch(ParseException e) {
	return(abort("DOT " + SYNTAXERROR, e));
    }
    catch(RuntimeException e) {
	String  msg = e.getMessage();
	if (msg != null && msg.startsWith("<LEXERR>"))
	    return(abort("DOT validation error: " + msg.substring(8)));
	else return(die(INTERNALERROR));	// should never get here!!
    }
    catch(TokenMgrError e) {
	return(die(SYNTAXERROR));	// should never get here!!
    }
    finally {
	restore();
    }
}

// ================================================================

void
Graphs() #void : {}
{
    ( Graph() )+
}

void
Graph() : { Token strict=null, graph=null, name=null, eof=null; }
{
    ( eof=<EOF> | [ (strict=<STRICT_KYWD>) ] (graph=<GRAPH_KYWD>|digraph=<DIGRAPH_KYWD>) (name=<ID>) <LBRACE> StmtList() <RBRACE> )
    {
	int type = _GRAPH;

	if (eof == null) {
	    if (strict == null)
		jjtThis.jjtInsertChild(new SimpleNode(_STRICT, "0"), 0);
	    else
		jjtThis.jjtInsertChild(new SimpleNode(_STRICT, "1"), 0);
	    if (digraph == null) {
		jjtThis.jjtInsertChild(new SimpleNode(_DIGRAPH, "0"), 1);
	    } else {
		jjtThis.jjtInsertChild(new SimpleNode(_DIGRAPH, "1"), 1);
	    }
	    jjtThis.jjtInsertChild(new SimpleNode(_NAME, fixID(name.image)), 2);
	} else type = YOIX_EOF;
	buildGraph(jjtThis, type);
    }
}

void
StmtList() : {}
{
    ( Stmt() [<SEMI>] )+
    {
	if (jjtThis.jjtGetNumChildren() == 0) {
	    jjtree.popNode();
	} else {
	    buildGraph(jjtThis, _BODY);
	}
    }
}


void
Stmt() #void : {}
{
    (LOOKAHEAD(HitAttrAsgn()) GraphAttrAsgn() | LOOKAHEAD(HitEdgeStmt()) EdgeStmt() | LOOKAHEAD(HitSubgraph()) Subgraph() | NodeStmt() | AttrStmt() )
}


void
GraphAttrAsgn() : {}
{
    AttrAsgn()
    {
	buildGraph(jjtThis, _GRAPH_ATTRIBUTES);
    }
}

void
AttrAsgn() : { Token name, svalue = null, hvalue=null; }
{
    ( name=<ID> <EQ> ( svalue=<ID> | hvalue=<HTML> ) )
    {
	jjtThis.jjtAppendChild(new SimpleNode(_NAME, fixID(name.image)));
	if (svalue != null)
	    jjtThis.jjtAppendChild(new SimpleNode(_VALUE, fixID(svalue.image)));
	else if (hvalue != null)
	    jjtThis.jjtAppendChild(new SimpleNode(_VALUE, "\000" + hvalue.image + "\000"));
	buildGraph(jjtThis, _ATTRIBUTE);
    }
}


void
AttrStmt() : { Token kywd=null; }
{
    ( [ kywd=<NODE_KYWD> | kywd=<EDGE_KYWD> | <GRAPH_KYWD> ]  AttrList() )
    {
        int   type = _GRAPH_ATTRIBUTES;
	char  c;

	if (jjtThis.jjtGetNumChildren() == 0) {
	    jjtree.popNode();
	} else {
	    if (kywd != null) {
		c = Character.toLowerCase(kywd.image.charAt(0));

		if (c == 'n') {
		    type = _NODE_ATTRIBUTES;
		} else {
		    type = _EDGE_ATTRIBUTES;
		}
	    }
	    buildGraph(jjtThis, type);
	}
    }
}

void
NodeStmt() : {}
{
    ( NodeId() [LOOKAHEAD(2) AttrList() ] )
    {
	buildGraph(jjtThis, _NODE);
    }
}

void
NodeId() #void : {}
{
    ( Name() [ LOOKAHEAD(HitColon()) Port() ] )
}

void
Name() : { Token id; }
{
    ( id=<ID> )
    {
	buildGraph(jjtThis, _NAME, id);
    }
}

void
Port() : { Token port, compass=null; }
{
    ( <COLON> port=<ID> [LOOKAHEAD(HitColon()) <COLON> compass=<ID> ] )
    {
	if (compass == null)
	    buildGraph(jjtThis, _PORT, port);
	else {
	    jjtThis.jjtAppendChild(new SimpleNode(_SELF, fixID(port.image)));
	    jjtThis.jjtAppendChild(new SimpleNode(_COMPASS, fixID(compass.image)));
	    buildGraph(jjtThis, _PORT);
	}
    }
}

void
AttrList() #void : {}
{
    (LOOKAHEAD(HitAttrList()) <LBRACK> [ AList() ] <RBRACK> )+
}


void
AList() #void : {}
{
    ( Attribute() )+
}


void
Attribute() : { Token name, svalue=null, hvalue=null; }
{
    (name=<ID> [LOOKAHEAD(HitAttrValue()) <EQ> ( svalue=<ID> | hvalue=<HTML> ) ] [<COMMA>] )
    {
	jjtThis.jjtAppendChild(new SimpleNode(_NAME, fixID(name.image)));
	if (svalue != null)
	    jjtThis.jjtAppendChild(new SimpleNode(_VALUE, fixID(svalue.image)));
	else if (hvalue != null)
	    jjtThis.jjtAppendChild(new SimpleNode(_VALUE, "\000" + hvalue.image + "\000"));
	buildGraph(jjtThis, _ATTRIBUTE);
    }
}


void
EdgeStmt() : {}
{
    ( EdgeId() [LOOKAHEAD(2) AttrList() ] )
    {
	buildGraph(jjtThis, _EDGE);
    }
}


void
EdgeId() #void : {}
{
    ( ( LOOKAHEAD(HitSubgraph()) Subgraph() | NodeId() ) (LOOKAHEAD(HitEdgeRHS()) EdgeRHS())+ )
}

void
EdgeRHS() #void : {}
{
    EdgeOp() ( LOOKAHEAD(HitSubgraph()) Subgraph() | NodeId() )
}

void
EdgeOp() #void : { Token dir=null, undir=null; }
{
    ( dir=<DIRECTED_EDGE> | undir=<UNDIRECTED_EDGE> )
    {
	if ((dir == null && digraph != null) || (dir != null && digraph == null))
	    abort("DOT " + SYNTAXERROR + ": bad edge direction (" + (dir==null?undir.image:dir.image) + ") for " + (digraph==null?"undirected":"directed") + " graph");
    }
}


void
Subgraph() #void : {}
{
    (LOOKAHEAD(HitNamedSubgraph()) NamedSubgraph() |LOOKAHEAD(HitAnonSubgraph()) AnonSubgraph() )
}


void
NamedSubgraph() : { Token id; }
{
    <SUBGRAPH_KYWD> id=<ID> [LOOKAHEAD(2) <LBRACE> StmtList() <RBRACE> ]
    {
	jjtThis.jjtInsertChild(new SimpleNode(_NAME, fixID(id.image)), 0);
	buildGraph(jjtThis, _SUBGRAPH);
    }
}


void
AnonSubgraph() : {}
{
    <LBRACE> StmtList() <RBRACE>
    {
	buildGraph(jjtThis, _SUBGRAPH);
    }
}

void
HitAnonSubgraph() : {}
{
    <LBRACE>
}

void
HitAttrAsgn() : {}
{
    <ID> <EQ>
}

void
HitAttrList() : {}
{
    <LBRACK>
}

void
HitAttrValue() : {}
{
    <EQ>
}

void
HitComma() : {}
{
    <COMMA>
}

void
HitEdgeStmt() : {}
{
    EdgeId()
}

void
HitEdgeRHS() : {}
{
    ( <UNDIRECTED_EDGE> | <DIRECTED_EDGE> )
}

void
HitNamedSubgraph() : {}
{
    <SUBGRAPH_KYWD>
}

void
HitColon() : {}
{
    ( <COLON> )
}

void
HitSubgraph() : {}
{
    ( <SUBGRAPH_KYWD> | <LBRACE> )
}
