import yoix.parser.*;
import yoix.stdio.*;
import yoix.string.*;
import yoix.util.*;

Array tests = {
    // Test 0
    PARSER_XML,
    "\
<?xml version = \"1.5\"?>\n\
<?popstate   < ? >    ?>\n\
<?popstate   ???? >>>>    ?>\n\
<?popstate   ????    ?>\n\
<?popstate  dog>?cat    ?>\n\
<end/>\n\
<?xml version=\"1.1\" encoding=\"USA\" standalone='no' ?>\n\
<!-- commenting -->\n\
<?popstate  another ?>\n\
<!-- more commenting -->\n\
<end/>\n\
",
    // Test 1
    PARSER_DTD,
    "\
<!-- declarations for <head> & <body> -->\n\
<!-- B+, B, or B- -->\n\
<!---B+, B, or B- -->\n\
<!--        -->\n\
",
    // Test 2
    PARSER_XML,
    "\
<testing>\n\
Try this:\n\
<![CDATA[<greeting>Hello, world!</greeting>]]>\n\
OK?\n\
</testing>\n\
",
    // Test 3
    PARSER_XML,
    "\
<?xml version=\"1.0\"?> <greeting>Hello, world!</greeting>\n\
<greeting>Hello, world!</greeting>\n\
",
    // Test 4
    PARSER_XML,
    "\
<?xml version=\"1.0\"?> <!DOCTYPE greeting SYSTEM \"hello.dtd\"> <greeting>Hello, world!</greeting>\n\
",
    // Test 5
    PARSER_XML,
    "\
<?xml version='1.0' encoding='UTF-8' ?>\n\
\n\
<!DOCTYPE greeting [\n\
	<!ELEMENT greeting (#PCDATA)>\n\
]>\n\
\n\
<greeting>Hello, world!</greeting>\n\
",
    // Test 6
    PARSER_XML,
    "\
<?xml version='1.0' standalone='yes'?>\n\
<end/>\n\
",
    // Test 7
    PARSER_DTD,
    "\
<!ATTLIST poem  xml:space (default|preserve) 'preserve'>\n\
\n\
<!-- -->\n\
<!ATTLIST pre xml:space (preserve) #FIXED 'preserve'>\n\
",
    // Test 8
    PARSER_XML,
    "\
<p xml:lang=\"en\">The quick brown fox jumps over the lazy dog.</p>\n\
<p xml:lang=\"en-GB\">What colour is it?</p>\n\
<p xml:lang=\"en-US\">What color is it?</p>\n\
<sp who=\"Faust\" desc='leise' xml:lang=\"de\">\n\
    <l>Habe nun, ach! Philosophie,</l>\n\
    <l>Juristerei, und Medizin</l>\n\
    <l>und leider auch Theologie</l>\n\
    <l>durchaus studiert mit heißem Bemüh'n.</l>\n\
</sp>\n\
",
    // Test 9
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!ATTLIST poem   xml:lang NMTOKEN 'fr'>\n\
<!ATTLIST gloss  xml:lang NMTOKEN 'en'>\n\
<!ATTLIST note   xml:lang NMTOKEN 'en'>\n\
] >\n\
<test/>\n\
",
    // Test 10
    PARSER_XML,
    "\
<termdef id=\"dt-dog\" term=\"dog\">\n\
</termdef>\n\
<IMG align=\"left\"\n\
src=\"http://www.w3.org/Icons/WWW/w3c_home\" />\n\
<br></br>\n\
<br/>\n\
",
    // Test 11
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!ENTITY % name.para '<!ELEMENT what EMPTY>'>\n\
<!ENTITY % content.para '<!ELEMENT ever ANY>'>\n\
%name.para; %content.para;\n\
<!ELEMENT br EMPTY>\n\
<!ELEMENT p (#PCDATA|emph)* >\n\
<!ELEMENT name.para empty >\n\
<!ELEMENT container ANY>\n\
<!ELEMENT container ( jar )>\n\
<!ELEMENT spec (front, body, back)?>\n\
<!ELEMENT div1 (head, (p | list | note)*, div2*)>\n\
<!ELEMENT dictionary-body (div.mix | dict.mix)*>\n\
<!ELEMENT p (#PCDATA|a|ul|b|i|em)*>\n\
<!ELEMENT p (#PCDATA | font | phrase | special | form)* >\n\
<!ELEMENT b (#PCDATA)>\n\
] >\n\
<test/>\n\
",
    // Test 12
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!ATTLIST termdef\n\
          id      ID      #REQUIRED\n\
          name    CDATA   #IMPLIED>\n\
<!ATTLIST list\n\
          type    (bullets|ordered|glossary)  \"ordered\">\n\
<!ATTLIST form\n\
          method  CDATA   #FIXED \"POST\">\n\
] >\n\
<test/>\n\
",
    // Test 13
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!ELEMENT book (comments*, title, body, supplements?)>\n\
<!ENTITY d \"&#xD;\">\n\
<!ENTITY a \"&#xA;\">\n\
<!ENTITY da \"&#xD;&#xA;\">\n\
<!ENTITY % draft 'INCLUDE' >\n\
<!ENTITY % final 'IGNORE' >\n\
] >\n\
<test/>\n\
",
    // Test 14
    PARSER_XML,
    "\
<!DOCTYPE document [\n\
<!ENTITY docdate 'September 11, 2001' >\n\
<!ENTITY security-level 'eyes-only' >\n\
] >\n\
<document>\n\
Type <key>less-than</key> (&#x3C;) to save options.\n\
This document was prepared on &docdate; and\n\
is classified &security-level;.\n\
</document>\n\
",
    // Test 15
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!-- declare the parameter entity \"ISOLat2\"... -->\n\
<!ENTITY % ISOLat2\n\
         SYSTEM \"http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent\" >\n\
<!-- ... now reference it. -->\n\
%ISOLat2;\n\
] >\n\
<test/>\n\
",
    // Test 16
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!ENTITY Pub-Status \"This is a pre-release of the\n\
specification.\">\n\
<!ENTITY open-hatch\n\
         SYSTEM \"http://www.textuality.com/boilerplate/OpenHatch.xml\">\n\
<!ENTITY open-hatch\n\
         PUBLIC \"-//Textuality//TEXT Standard open-hatch boilerplate//EN\"\n\
         \"http://www.textuality.com/boilerplate/OpenHatch.xml\">\n\
<!ENTITY hatch-pic\n\
         SYSTEM \"../grafix/OpenHatch.gif\"\n\
         NDATA gif >\n\
] >\n\
<test/>\n\
",
    // Test 17
    PARSER_XML,
    "\
<?xml version='1.0' encoding='UTF-8'?>\n\
<end/>\n\
<?xml version='1.0' encoding='EUC-JP'?>\n\
<end/>\n\
",
    // Test 18
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!--  -->\n\
<!ENTITY % YN '\"Yes\"' >\n\
<!ENTITY WhatHeSaid \"He said %YN;\" >\n\
<!ENTITY % pub    \"&#xc9;ditions Gallimard\" >\n\
<!ENTITY   rights \"All rights reserved\" >\n\
<!ENTITY   book   \"La Peste: Albert Camus,\n&#xA9; 1947 %pub;. &rights;\" >\n\
<!ENTITY lt     \"&#38;#60;\">\n\
<!ENTITY gt     \"&#62;\">\n\
<!ENTITY amp    \"&#38;#38;\">\n\
<!ENTITY apos   \"&#39;\">\n\
<!ENTITY quot   \"&#34;\">\n\
] >\n\
<test/>\n\
",
    // Test 19
    PARSER_XML,
    "\
<?xml version='1.0' ?>\n\
<!DOCTYPE p [\n\
<!ENTITY example '<p>An ampersand (&#38;#38;) may be escaped\nnumerically (&#38;#38;#38;) or with a general entity\n(&amp;amp;).</p>' >\n\
] >\n\
<p>An ampersand (&#38;) may be escaped\nnumerically (&#38;#38;) or with a general entity\n(&amp;amp;).</p>\n\
",
    // Test 20
    PARSER_XML,
    "\
<?xml version='1.0'?>\n\
<!DOCTYPE test [\n\
<!ELEMENT test (#PCDATA) >\n\
<!ENTITY % xx '&#37;zz;'>\n\
<!ENTITY % zz '&#60;!ENTITY tricky \"error-prone\" >' >\n\
%xx;\n\
]>\n\
<test>This sample shows a &tricky; method.</test>\n\
",
    // Test 21
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!NOTATION note SYSTEM 'sys'>\n\
<!NOTATION note PUBLIC 'pub' 'sys'>\n\
<!NOTATION note PUBLIC 'pub'>\n\
] >\n\
<test/>\n\
",
    // Test 22
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<?w so ?>\n\
] >\n\
<test/>\n\
",
    // Test 23
    PARSER_XML,
    "\
  \n\
<end/>\n\
",
};

Array errors = {
    // Error Test 0
    PARSER_XML,
    "\
<?xml version='1.0' standalone='yes'?>\n\
",
    // Error Test 1
    PARSER_XML,
    "\
Text??\n\
",
    // Error Test 2
    PARSER_XML,
    "\
<dog>\n\
what?\n\
</cat>\n\
",
    // Error Test 3
    PARSER_XML,
    "\
  \n\
",
    // Error Test 4
    PARSER_XML,
    "\
<?xml version=\"1.0\" ?>\n\
<!DOCTYPE test [\n\
<!NOTATION note PUBLIC 'pub'>\n\
] >\n\
<error/>\n\
",
};

ParseTree tree;
Option    option;
int       ch;

int addtags = 0;
int error_test_nbr = -1;
int test_nbr = -1;

while ((ch = getopt(option, global.argv, "e:at:")) != -1) {
    switch(ch) {
    case 'a':
	addtags = 1;
	break;
    case 'e':
	error_test_nbr = atoi(option.optarg);
	break;
    case 't':
	test_nbr = atoi(option.optarg);
	break;
    case '?':
	fprintf(stderr, "ERROR: %s: %s\n", argv[0], option.opterror);
	exit(1);
	break;
    }
}

tree.addtags = addtags;


for(i=0; i<tests@length; i+=2) {
    if(test_nbr >= 0 && test_nbr != i/2)
	continue;
    printf("Running test #%d\n", i/2);
    tree.parser = tests[i];
    tree.parse = tests[i+1];
    if(tree.errordict) {
	fprintf(stderr, "ERROR: %s: %s\n", argv[0], tree.errordict.message);
	continue;
    } else {
        stdout.nextbuf = tree.tree;
    }
}
for(i=0; i<errors@length; i+=2) {
    if(error_test_nbr >= 0 && error_test_nbr != i/2)
	continue;
    printf("Running error test #%d\n", i/2);
    tree.parser = errors[i];
    tree.parse = errors[i+1];
    if(tree.errordict) {
	fprintf(stdout, "ERROR: %s: %s\n", argv[0], tree.errordict.message);
	continue;
    } else {
	fprintf(stderr, "ERROR: %s: %s\n", argv[0], "expected an error!");
    }
}

exit(0);

