import yoix.*.*;

Dictionary IconCache[0, ...];

BuildPolygonIcon(Dimension size, int sides, double degrees, String text, Color polygoncolor, Color textcolor, int smooth, int outline, int addshadow, double shrink, String font) {
    Image image = {
	Dimension size = size;
	int       type = TYPE_RGB_ALPHA;

	Graphics graphics = {
	    String font = (font == NULL ? "Helvetica-bold-10" : font);
	    int    antialiasing = TRUE;
	    int    linejoin = (smooth ? JOIN_ROUND : JOIN_MITER);
	    int    linecap = (smooth ? CAP_ROUND : CAP_BUTT);
	};

	String text = text;
	double shrink = min(shrink, 1.0);
	Color  polygoncolor = polygoncolor;
	Color  textcolor = textcolor;
	double adjustment;
	double degrees = degrees;
	int    sides = sides;
	int    addshadow = addshadow;
	int    smooth = smooth;
	int    outline = outline;

	paint(Rectangle r) {
	    Rectangle textbounds;
	    Rectangle bounds;
	    double    factor;
	    double    scaling;
	    double    shadow;
	    double    strokewidth;
	    double    side;
	    double    dx;
	    double    dy;
	    double    angle;
	    int       n;

	    if (sides == 0)
		return;

	    angle = 360.0/sides;
	    dx = abs(sin(angle/2));
	    dy = abs(cos(angle/2));
	    side = 2.0*dx;

	    if ((factor = min(size.width, size.height)/72.0) < 1.0) {
		if (factor <= .25)
		    factor = 0;
	    } else factor = min(factor, 2.0);
	    if (factor == 0) {
		addshadow = 0;
		smooth = 0;
		outline = 0;
	    }
	    shadow = factor*72.0/18;
	    strokewidth = 2.0*shadow;

	    graphics {
		erasedrawable(0.0);	// make a transparent image

		//
		// Build a "unit" polygon with center at (0, 0) and a horizontal
		// side along its bottom.
		//

		translate(dx, dy);
		moveto(0, 0);

		for (n = 0; n < sides; n++) {
		    translate(-side, 0);
		    lineto(0, 0);
		    rotate(angle);
		}

		closepath();
		rotatepath(degrees);
		translate(-dx, -dy);	// should be back to the original CTM

		//
		// Scale the polygon so it fits the comfortably into the image,
		// then translate the path so it's centered in the image.
		//

		bounds = pathbbox();
		adjustment = 0;
		if (addshadow && shadow > 0)
		    adjustment += shadow;
		adjustment += strokewidth;
		scaling = shrink*min((size.width - 2*adjustment)/bounds.width, (size.height - 2*adjustment)/bounds.height);
		path.scalepath(scaling, scaling);
		bounds = pathbbox();
		path.translatepath(size.width/2 - (bounds.x + bounds.width/2), size.height/2 - (bounds.y + bounds.height/2));

		//
		// Draw the polygon's shadow, if there's supposed to be one, and
		// then draw the polygon.
		//

		if (addshadow && shadow > 0) {
		    gsave();
		    path.translatepath(shadow, shadow);
		    setgray(.5);
		    linewidth = strokewidth;
		    strokepath();
		    fill(.4);
		    grestore();
		}

		foreground = polygoncolor;
		gsave();
		linewidth = strokewidth;
		strokepath();
		fill();
		grestore();
		if (outline) {
		    gsave();
		    linewidth = strokewidth/2;
		    foreground = textcolor;
		    strokepath();
		    fill();
		    grestore();
		}
		fill();

		//
		// We deal with the text string as a path that's supposed to fit
		// comfortably into the polygon that we just drew using the same
		// techniques that we just used for the polygon.
		//

		if (text != NULL && text@sizeof > 0) {
		    moveto(0, 0);
		    charpath(text);
		    textbounds = pathbbox();
		    scaling = 0.9*min(bounds.width/textbounds.width, .6*bounds.height/textbounds.height);
		    path.scalepath(scaling, scaling);
		    bounds = pathbbox();
		    if (sides == 3)
			path.translatepath(size.width/2 - bounds.x - bounds.width/2, size.height/2 + 1.25 * (bounds.height/2 - (bounds.height + bounds.y)));
		    else path.translatepath(size.width/2 - bounds.x - bounds.width/2, size.height/2 + (bounds.height/2 - (bounds.height + bounds.y)));
		    foreground = textcolor;

		    if (scaling < 0.5) {
			//
			// This should fatten up text a bit when it's really
			// small. Thrown in quickly, so there's undoubtedly
			// lots of room for improvement - maybe later!!
			//
			gsave();
			linewidth = .4;
			strokepath();
			fill();
			grestore();
		    }
		    fill();

		}
	    }
	}
    };
    return(image);
}

GetButtonDownIcon(...) {
    Dimension size = PickIconSize((argc > 1) ? argv[1] : 0.25*72.0);
    Color     iconcolor = (argc > 2 && argv[2]) ? argv[2] : Color.black;
    double    shrink = (argc > 3) ? argv[3] : 0.9;
    String    name = "buttonDownIcon" + toString(size) + toString(iconcolor) + toString(shrink);
    
    if (!defined(name, IconCache)) {
	Image image = BuildPolygonIcon(size, 3, 180, NULL, iconcolor, NULL, TRUE, FALSE, FALSE, shrink, NULL);
	image.description = name;
	IconCache[name] = image;
    }
    return(IconCache[name]);
}

GetButtonEmptyIcon(...) {
    Dimension size = PickIconSize((argc > 1) ? argv[1] : 0.25*72.0);
    Color     iconcolor = (argc > 2 && argv[2]) ? argv[2] : Color.black;
    double    shrink = (argc > 3) ? argv[3] : 0.9;
    String    name = "buttonEmptyIcon" + toString(size) + toString(iconcolor) + toString(shrink);
    
    if (!defined(name, IconCache)) {
	Image image = BuildPolygonIcon(size, 0, 0, NULL, iconcolor, NULL, TRUE, FALSE, FALSE, shrink, NULL);
	image.description = name;
	IconCache[name] = image;
    }
    return(IconCache[name]);
}

GetButtonUpIcon(...) {
    Dimension size = PickIconSize((argc > 1) ? argv[1] : 0.25*72.0);
    Color     iconcolor = (argc > 2 && argv[2]) ? argv[2] : Color.black;
    double    shrink = (argc > 3) ? argv[3] : 0.9;
    String    name = "buttonUpIcon" + toString(size) + toString(iconcolor) + toString(shrink);
    
    if (!defined(name, IconCache)) {
	Image image = BuildPolygonIcon(size, 3, 0, NULL, iconcolor, NULL, TRUE, FALSE, FALSE, shrink, NULL);
	image.description = name;
	IconCache[name] = image;
    }
    return(IconCache[name]);
}

PickIconSize(Object size) {
    if (!(size instanceof Dimension)) {
	if (size instanceof Number) {
	    size = new Dimension {
		double width = size;
		double height = size;
	    };
	} else if (size instanceof Font) {
	    size = new Dimension {
		double width = size.height;
		double height = size.height;
	    };
	} else {
	    size = new Dimension {
		double width = 72.0/3;
		double height = 72.0/3;
	    };
	}
    }
    return(size);
}

Font bf = {
    String name = "Dialog-plain-12";
};
Image  no_icon   = GetButtonEmptyIcon(bf, Color.gray, 0.8);
Image  up_icon   = GetButtonUpIcon(bf, Color.gray, 0.8);
Image  down_icon = GetButtonDownIcon(bf, Color.gray, 0.8);


TableSorter(e) {
    int idx;
    int len;
    int off;
    int i;
    int j;

    //
    // A generic invocationAction() event handler that can be used
    // by the JTable component. It uses the spare "etc" field in
    // JTable to store sort column info across invocations.
    // 

    save this.root.cursor = Cursor.WAIT_CURSOR;

    if (e == NULL) {
	if (this.etc != NULL && this.etc@sizeof > 0) {
	    this.action(TABLE_SORT, this.etc + off);
	}
    } else if (e.valuesColumn >= 0) {
	if ((e.modifiers&CTRL_MASK) == 0) {
	    this.etc = new Array[0,...] {};
	    len = 0;
	} else {
	    e.modifiers &= ~CTRL_MASK;
	    if (this.etc == NULL)
		this.etc = new Array[0,...] {};
	    len = this.etc@length;
	}

	if (e.modifiers == BUTTON1_MASK) {
	    if (len == 0 && this.columns[e.valuesColumn].state > 0)
		idx = 0;
	    else idx = 1 + e.valuesColumn;
	} else {
	    if (len == 0 && this.columns[e.valuesColumn].state < 0)
		idx = 0;
	    else idx = -(1 + e.valuesColumn);
	}
	for (i=0; i<len; i++) {
	    if (idx == this.etc[i]) {
		for (j=i; j>0; j--)
		    this.etc[j] = this.etc[j-1];
		this.etc[0] = 0;
		idx = 0;
		break;
	    } else if (-idx == this.etc[i]) {
		this.etc[i] = idx;
		idx = 0;
		break;
	    }
	}
	for (off=0; off<len; off++) {
	    if (this.etc[off] != 0)
		break;
	}
	if (idx != 0) {
	    this.etc[len] = idx;
	    len++;
	}

	if (len == off) {
	    this.action(TABLE_SORT, NULL);
	    this.etc = new Array[0,...] {};
	} else this.action(TABLE_SORT, this.etc + off);

	if (defined("dfltcellcolors", this)) {
	    if (len == off) {
		this.cellcolors = this.dfltcellcolors;
	    } else {
		Array  values;
		Array  cols;
		Array  etc;

		cols = new Array[len-off];
		etc = (this.etc + off);
		for (m = 0; m < cols@length; m++) {
		    cols[m] = abs(etc[m]) - 1;
		}
		this.cellcolors = getArrayBands(
		    this.action(TABLE_JOIN, cols, TRUE, TRUE, 1),
		    unroll(this.dfltcellcolors)
		    );
	    }
	}
    }
}

JTable jt = {
    int tooltips = 1;
    int resize = 1;
    int reorder = 1;
    int scroll = AS_NEEDED;
    Color background = Color.blue;

    Array headericons = {
	new Array[] { no_icon, up_icon, down_icon, },
    };

    Array altbackground = {
	Color.orange,
	Color.red,
	Color.green,
    };
    Array altforeground = {
	Color.black,
	Color.pink,
	Color.magenta,
    };
    Array cellcolors = {
	new Array[] { Color.yellow, Color.orange },
	Color.red,
    };
    Array dfltcellcolors = cellcolors;

    Array columns = {
	new JTableColumn {
	    //Array altbackground = {
		//Color.orange,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    Array cellcolors = {
		Color.lightGray,
		new Array { Color.magenta, Color.red, Color.green, Color.yellow, Color.blue },
	    };
	    String header = "Shares";
	    int type = HISTOGRAM_TYPE;
	    String text = "12.5\n10\n15\n8\n9\n";
	    double etc = 15;
	    int alignment = LEFT;
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.orange,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.yellow, Color.yellow, Color.orange, Color.orange },
		//Color.red,
	    //};
	    String header = "First Name";
	    int width = 72;
	    int type = STRING_TYPE;
	    String text = "Mary\nAlison\nKathy\nSharon\nAngela\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.orange, Color.orange, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "Last Name";
	    int width = 72;
	    String font = "Helvetica-plain-18";
	    int type = STRING_TYPE;
	    String text = "Lih\nHuml\nWalrath\nZakhour\nWalrath\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.green, Color.green, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "Sport";
	    int type = STRING_TYPE;
	    String text = "Snowboarding\nRowing\nChasing toddlers\nSpeed reading\nTeaching high school\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.orange, Color.orange, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "Flag";
	    int type = ICON_TYPE;
	    String text = "/home/john/junk/flag.jpg\n/home/john/junk/flag.jpg\n/home/john/junk/flag.jpg\n/home/john/junk/flag.jpg\n/home/john/junk/flag.jpg\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.orange, Color.orange, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "Percent";
	    int type = PERCENT_TYPE;
	    String text = "0.17\n0.173\n0.178\n0.5\n1.234\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.orange, Color.orange, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "Date";
	    int type = DATE_TYPE;
	    String text = "Fri Jun  6 11:56:58 EDT 2003\nFri Jun  6 13:46:58 EDT 2003\nFri Jun  6 11:46:57 EDT 2003\nFri Jun  6 11:46:59 EDT 2003\nFri Jun  6 11:46:58 EDT 2003\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.orange, Color.orange, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "Salary";
	    int type = MONEY_TYPE;
	    String text = "143.1234\n1923.321\n12.5\n-142\n123.123\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.orange, Color.orange, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "# of Years";
	    int width = 72;
	    int type = INTEGER_TYPE;
	    String text = "5\n3\n2\n20\n4\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.orange, Color.orange, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "Vegetarian";
	    int width = 72;
	    int type = BOOLEAN_TYPE;
	    String text = "0\nyes\nno\ntrue\nfalse\n";
	    int altalignment = LEFT;
	},
	new JTableColumn {
	    //Array altbackground = {
		//Color.pink,
		//Color.red,
		//Color.green,
	    //};
	    //Array altforeground = {
		//Color.black,
		//Color.pink,
		//Color.magenta,
	    //};
	    //Array cellcolors = {
		//new Array[] { Color.orange, Color.orange, Color.yellow, Color.yellow },
		//Color.red,
	    //};
	    String header = "Timer";
	    int type = TIMER_TYPE;
	    String text = "1d2m\n23h12m\n23h11m59s\n2d\n5m\n";
	    int altalignment = LEFT;
	},
    };
    //String values = "Mary|Walrath|Snowboarding|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|143.1234|5|false|1d2m\nAlison|Huml|Rowing|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|1923.321|3|true|23h12m\nKathy|Walrath|Chasing toddlers|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|12.5|2|false|23h11m59s\nSharon|Zakhour|Speed reading|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|-142|20|true|2d\nAngela|Lih|Teaching high school|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|123.123|4|false|5m\n";
    //Array types = {
	//STRING_TYPE, STRING_TYPE, STRING_TYPE, ICON_TYPE, PERCENT_TYPE, DATE_TYPE, MONEY_TYPE, INTEGER_TYPE, BOOLEAN_TYPE, TIMER_TYPE,
    //};

    Function invocationAction  = TableSorter;
    
};

JFrame f = {
    int visible = 1;
    Dimension size = NULL;

    Array layout = {
	jt,
	CENTER,
    };
};
