//
// A rather complicated example that illustrates how to use an image's
// paint() function to draw a stop sign that you might use as an icon.
// Our implementation is more general than you might expect, so with a
// little work you could use it to build lots of different icon signs.
// Our handling of the addresses currently uses charpath() and fill()
// (rather than charpath() and show()) because we noticed some system
// dependent behavior when charpath() bounds were used for sizing and
// positioning of strings rendered by show(). We will investigate.
//

import yoix.*.*;

Image stop = {
    int type = TYPE_RGB_ALPHA;

    Dimension size = {
	double width = 4.0*72;
	double height = 4.0*72;
    };

    Graphics graphics = {
	String font = "Helvetica-bold-10";
	/////String font = "Ludica-bold-10";
	/////String font = "TimesRoman-bold-10";
	/////String font = "Courier-bold-10";
	/////String font = "Utopia-bold-10";
	int    antialiasing = TRUE;
	////int    fractionalmetrics = TRUE;
    };

    paint(Rectangle r) {
	Rectangle textbounds;
	Rectangle bounds;
	double    factor;
	double    scaling;
	double    shadow;
	double    side;
	String    text = "STOP";
	double    dx;
	double    dy;
	double    angle;
	Color     polygoncolor = Color.red;
	Color     textcolor = Color.white;
	int       addshadow = TRUE;
	int       sides = 8;
	int       n;

	angle = 360.0/sides;
	dx = abs(sin(angle/2));
	dy = abs(cos(angle/2));
	side = 2*dx;

	if ((factor = min(size.width, size.height)/72.0) < 1.0) {
	    if (factor <= .25)
		factor = 0;
	} else factor = min(factor, 2.0);
	shadow = factor*72.0/18;

	graphics {
	    //
	    // Make a transparent image.
	    //

	    erasedrawable(0.0);

	    //
	    // Build a "unit" polygon with center at (0, 0) and a horizontal
	    // side along its bottom.
	    //

	    translate(dx, dy);
	    moveto(0, 0);

	    for (n = 0; n < sides; n++) {
		translate(-side, 0);
		lineto(0, 0);
		rotate(angle);
	    }

	    translate(-dx, -dy);	// should be back to the original CTM

	    //
	    // Scale the polygon so it fits the comfortably into the image,
	    // then translate the path so it's centered in the image.
	    //

	    bounds = pathbbox();
	    scaling = .95*min((size.width - 2*shadow)/bounds.width, (size.height - 2*shadow)/bounds.height);
	    path.scalepath(scaling, scaling);
	    bounds = pathbbox();
	    path.translatepath(size.width/2 - (bounds.x + bounds.width/2), size.height/2 - (bounds.y + bounds.height/2));

	    //
	    // Draw the polygon's shadow, if there's supposed to be one, and
	    // then draw the polygon.
	    //

	    if (addshadow && shadow > 0) {
		gsave();
		path.translatepath(shadow, shadow);
		setgray(.5);
		fill(.4);
		grestore();
	    }

	    foreground = polygoncolor;
	    fill();

	    //
	    // We deal with the text string as a path that's supposed to fit
	    // comfortably into the polygon that we just drew using the same
	    // techniques that we just used for the polygon. Rendering the
	    // text as a path (rather than by using show()) means the bounds
	    // that we calculate for the path itself should hold. There were
	    // some small, but annoying, positioning problems on some systems
	    // when we used the charpath() bounds to position the text that
	    // was drawn with show(). The behavior seems like something that
	    // should be investigated!!
	    //

	    moveto(0, 0);
	    charpath(text);
	    textbounds = pathbbox();
	    scaling = 0.9*min(bounds.width/textbounds.width, .6*bounds.height/textbounds.height);
	    path.scalepath(scaling, scaling);
	    bounds = pathbbox();
	    path.translatepath(size.width/2 - bounds.x - bounds.width/2, size.height/2 + (bounds.height/2 - (bounds.height + bounds.y)));
	    foreground = textcolor;
	    fill();
	}
    }
};

JFrame jf = {
    Dimension size = NULL;
    int visible = TRUE;

    Array layout = {
	new JButton {
	    Image icon = stop;
	    actionPerformed(e) {
		exit(0);
	    }
	}
    };
};
