//
// A slightly modified version of the last example that uses dragOver()
// to handle cursor animation. It's harder than using dragMouseMoved()
// because dragOver() will not be called with a DragSourceEvent until
// we officially indicate (by returning TRUE in dragEnter()) that we
// can accept a drop.
//

import yoix.*.*;

PaintScrew(double angle) {
    Image image = {
	int type = TYPE_RGBA;

	Dimension size = {
	    double width = 72/3;
	    double height = 72/3;
	 };

	Graphics graphics = {
	    int rendering = 1;		// probably no help
	    int antialiasing = 1;
	};

	double angle = angle;

	paint(Rectangle r) {
	    Rectangle bbox;
	    double    thickness;
	    double    radius;
	    double    alpha;
	    double    cx;
	    double    cy;

	    graphics {
		gsave();
		initclip();
		clippath();
		bbox = pathbbox();
		newpath();

		cx = bbox.width/2;
		cy = bbox.height/2;
		thickness = cx/4.0;
		radius = cx - thickness - 1;
		alpha = 180*atan2(thickness/2, radius)/PI;

		translate(cx, cy);
		rotate(angle);

		moveto(0, thickness/2);
		arc(0, 0, radius, alpha, 180 - alpha);
		closepath();

		moveto(0, -thickness/2);
		arc(0, 0, radius, 180 + alpha, 360 - alpha);
		closepath();

		moveto(radius + thickness, 0);
		arc(0, 0, radius + thickness, 0, 360);
		closepath();

		gsave();
		setrgbcolor(0, 0, 1);
		eofill();
		grestore();

		setlinewidth(1);
		setrgbcolor(1, 1, 0);
		stroke();
		grestore();

		hotspot = new Point {
		    double x = cx;
		    double y = cy;
		};
	    }
	}
    };

    return(image);
}

Array names[30];

for (n = 0; n < names@length; n++) {
    names[n] = "SCREW_" + toString(n);
    addCursor(names[n], PaintScrew(n*180/names@length));
}

JFrame frame = {
    Object transferhandler = NULL;	// just in case
    int    next = 1;

    dragGestureRecognized(DragGestureEvent e) {
	//
	// We have to return something that's not NULL, even though
	// this example doesn't transfer anything, otherwise dragging
	// won't start.
	//
	e.cursor = names[next++ % names@length];
	return("");		// bogus return
    }

    dragEnter(DropTargetEvent e) {
	return(FALSE);
    }

    dragOver(DragSourceEvent e) {
	e.cursor = names[next++ % names@length];
    }
};

frame.visible = TRUE;
