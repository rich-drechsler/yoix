import yoix.*.*;

//Image img1;
Image img3;
double sc;

revcmp(Dictionary d1, Dictionary d2) {
    return(d2.valuesRow - d1.valuesRow);
}

ordering(JTable tb) {
    for(i=0; i<tb.rows; i++) {
	fprintf(stderr, "%d -> %d (%s)\n", i, tb.viewToModel(i,"r"), tb.action(GET_FIELD, tb.viewToModel(i,"r"), 0));
    }
}

JFrame screen = {
    int visible = 1;
    Dimension size = NULL;

    Array layout = {
	new JTable {
	    String tag = "$_jt";
	    int reorder = 0;
	    int resize = 1;
	    int scroll = AS_NEEDED;
	    int edit = 1;
	    Color background = Color.white;
	    int multiplemode = MULTIPLE_INTERVAL_SELECTION;
	    String inputfilter = "|";
	    String outputfilter = "|";

	    Object transferhandler = NULL;
	    dragGestureRecognized(e) {
		Rectangle rowrect;
		Rectangle winrect;
		String rowtext = NULL;
		Array rows = action(GET_ROW_SELECTION);
		Image img1;
		if (rows@length > 0) {
		    ridx = rows[0].viewRow;
		    rowtext = action(GET_ROW, rows[0].valuesRow);
		    Image img2 = NULL;
		    if (rows@length > 1) {
			int n;
			Dictionary cell = action(FIND_CELL_AT, e.location);
			ridx = cell.valuesRow;
			rowrect = action(GET_ROW_RECT, ridx, true);
			winrect = action(GET_ROW_RECT, ridx);
			e.offset = new Point {
			    double x = winrect.x - e.location.x;
			    double y = winrect.y - e.location.y;
			};
			e.anchor = NONE;
			img1 = captureScreen(rowrect);
			for(n=1; n<rows@length; n++)
			    rowtext += "\n" + action(GET_ROW, rows[n].valuesRow);
			double ht = rowrect.height;
			img3 = new Image {
			    int type = TYPE_RGB_ALPHA;
			    Graphics graphics = {
				String font = "Helvetica-plain-14";
			    };
			    String nbr = toString(rows@length);
			    double fwd = stringWidth(graphics.font, nbr);
			    double fht = graphics.font.height;
			    if (fht > fwd) {
				sc = fht * 1.4;
			    } else {
				sc = fwd * 1.4;
				fht = fwd;
				
			    }
			    fwd = fht * 0.2;
			    Dimension size = {
				double width = sc;
				double height = sc;
			    };
			    paint(Rectangle r) {
				graphics.foreground = Color.red;
				fillOval(this, 0, 0, sc, sc);
				graphics.foreground = Color.white;
				double x = 2.0 * fwd;
				double y = sc - fwd;
				drawString(this, nbr, x, y);
			    }
			};
			img2 = new Image {
			    Image image1 = img1;
			    double ioffx = 9 - e.offset.x;
			    Dimension size = new Dimension {
				double width = img1.size.width;
				double height = sc;
			    };
			    double off = (sc - img1.size.height) / 2.0;
			    int type = TYPE_RGB_ALPHA;
			    paint(Rectangle r) {
				graphics {
				    gsave();
				    moveto(0,off);
				    showimage(image1, 0.6);
				    moveto(ioffx, 0);
				    showimage(img3);
				    grestore();
				}
			    }
			};
		    } else {
			rowrect = action(GET_ROW_RECT, ridx, true);
			winrect = action(GET_ROW_RECT, ridx);
			e.offset = new Point {
			    double x = winrect.x - e.location.x;
			    double y = winrect.y - e.location.y;
			};
			e.anchor = NONE;
			img1 = captureScreen(rowrect);
			img2 = new Image{
			    Image image1 = img1;
			    Dimension size = img1.size;
			    int type = TYPE_RGB_ALPHA;
			    paint(Rectangle r) {
				graphics {
				    gsave();
				    moveto(0,0);
				    showimage(image1, 0.6);
				    grestore();
				}
			    }
			};
		    }
		    e.visual = img2;
		}
		return(rowtext);
	    }
	    dragEnter(DropTargetEvent e) {
		return(TRUE);
	    }
	    drop(e) {
		String oldtext;
		int retval = FALSE;
		Dictionary cell;
		Rectangle winrect;
		Array rows;
		Array replace;
		double ypos;
		int ridx;
		int rins;

		if (e.transferable instanceof String) {
		    rows = action(GET_ROW_SELECTION);
		    cell = action(FIND_CELL_AT, e.location);
		    winrect = action(GET_ROW_RECT, cell.valuesRow);
		    ypos = e.location.y - winrect.y;
		    if (ypos < (winrect.height/2.0))
			rins =  cell.viewRow - 1;
		    else rins = cell.viewRow;
		    if (rows@length >= 1) {
			replace = new Array[rows@length];
			for (ridx = 0; ridx < rows@length; ridx++)
			    replace[ridx] = rows[ridx].viewRow;
		    } else replace = NULL;
		    try {
			oldtext = text;
			action(REPLACE_ROWS, e.transferable, rins, replace, TRUE);
			retval = TRUE;
		    }
		    catch(e) {
			fprintf(stderr, "ERROR: %O\n", e.message);
			text = oldtext;
			retval = FALSE;
			return(TRUE);
		    }
		}
		return(retval);
	    }

	    Array headers = {
		"First Name", 
		"Last Name",
		"Sport",
		"Flag",
		"Percent",
		"Date",
		"Salary",
		"# of Years",
		"Vegetarian",
		"Timer",
	    };
	    String values = "Mary|Walrath|Snowboarding|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|143.1234|5|false|1d2m\nAlison|Huml|Rowing|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|1923.321|3|true|23h12m\nKathy|Walrath|Chasing toddlers|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|12.5|2|false|23h11m59s\nSharon|Zakhour|Speed reading|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|-142|20|true|2d\nAngela|Lih|Teaching high school|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|123.123|4|false|5m\n";
	    Array types = {
		STRING_TYPE, STRING_TYPE, STRING_TYPE, ICON_TYPE, PERCENT_TYPE, DATE_TYPE, MONEY_TYPE, INTEGER_TYPE, BOOLEAN_TYPE, TIMER_TYPE,
	    };
	},
	CENTER,
	new JPanel {
	    FlowLayout layoutmanager = {
		int hgap = 36;
		int vgap = 18;
	    };

	    Array layout = {
		new JButton {
		    String text = "Reload";
		    actionPerformed(e) {
			String values = "Mary|Walrath|Snowboarding|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|143.1234|5|false|1d2m\nAlison|Huml|Rowing|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|1923.321|3|true|23h12m\nKathy|Walrath|Chasing toddlers|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|12.5|2|false|23h11m59s\nSharon|Zakhour|Speed reading|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|-142|20|true|2d\nAngela|Lih|Teaching high school|/home/john/junk/flag.jpg|0.17|Fri Jun  6 11:46:58 EDT 2003|123.123|4|false|5m\n";
			root.components.$_jt.values = values;
			stderr.nextline = values;
		    }
		},
		new JButton {
		    String text = "Toggle Editing";
		    actionPerformed(e) {
			JTable jt = root.components.$_jt;
			jt.edit = !jt.edit;
		    }
		},
		new JButton {
		    String text = "Mapping (wo/EDIT_STOP)";
		    actionPerformed(e) {
			for(i=0; i<root.components.$_jt.rows; i++) {
			    fprintf(stderr, "%d->%d (%O)\n", i, root.components.$_jt.viewToModel(i,"r"), root.components.$_jt.action(GET_FIELD, root.components.$_jt.viewToModel(i,"r"), 0));
			}
		    }
		},
		new JButton {
		    String text = "Mapping (w/EDIT_STOP)";
		    actionPerformed(e) {
			root.components.$_jt.action(EDIT_STOP);
			for(i=0; i<root.components.$_jt.rows; i++) {
			    fprintf(stderr, "%d->%d (%O)\n", i, root.components.$_jt.viewToModel(i,"r"), root.components.$_jt.action(GET_FIELD, root.components.$_jt.viewToModel(i,"r"), 0));
			}
		    }
		},
		new JButton {
		    String text = "Dump";
		    actionPerformed(e) {
			stdout.nextbuf = root.components.$_jt.text;
		    }
		},
		new JButton {
		    String text = "Exit";
		    actionPerformed(e) {
			exit(0);
		    }
		},
	    };
	},
	SOUTH,
    };
};

JTable jt = screen.components.$_jt;
