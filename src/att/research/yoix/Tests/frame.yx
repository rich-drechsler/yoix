//
// This time we'll show you how to hook the components up. It's usually
// (but not always) done by defining a tag field in some components, and
// using root, components, and tag to access components. The tag can be
// almost any string you want, but some consistenty helps make your code
// more readable. We recently started using tags that being with prefix
// "$_" and really did find that it helped. We recommend you do the same.
//

import yoix.*.*;

Frame f = {
    String title = "AWT Frame";

    Dimension size = {
	double height = 4*72;		// 4 inches
	double width = VM.screen.width/2;
    };

    //
    // Notice that we used size.height to position the Frame vertically.
    // This only works because the Frame's size field was initialized
    // before we used it here. This is not a style we want to encourage,
    // but it is something we wanted to demonstrate. A better approach
    // probably would be to define a constant, say HEIGHT, that's four
    // inches and use it to initialize the size and location fields.
    // 

    Point location = {
	double x = 2*72;		// 2 inches
	double y = 1*72;		// 1 inches
    };

    //
    // This sets the Frame's background color. It's also inherited by
    // all components (e.g., Button) that are put in the Frame that
    // don't explicitly request their own background color.
    //

    Color background = Color.gray;

    //
    // We didn't initialize the Frame's layoutmanager field, so we get
    // the default, which for a Frame is BorderLayout. A BorderLayout
    // layout manager expects to find component (e.g., a Button) and
    // constraint (e.g., SOUTH) pairs in the layout array.
    //

    Array layout = {
	new Label {
	    String font = "Helvetica-plain-14";
	    String text = "This Is A Centered Label";
	    Color  foreground = Color.red;
	    int    alignment = CENTER;
	}, NORTH,

	//
	// Putting the TextArea in the center means it grabs all the
	// space that's left in the Frame. We'll show you one way to
	// leave margins in a few steps.
	//
	new TextArea {
	    String tag = "$_textarea";
	    Color  background = Color.white;
	    int    edit = TRUE;
	    int    scroll = VERTICAL;
	}, CENTER,

	//
	// Only way to put three Buttons at the bottom of a Frame that
	// is using a BorderLayout layout manager is to put the Buttons
	// in a Panel, and then put that Panel in the SOUTH. This time
	// the Buttons go in a GridLayout Panel, but that Panel is put
	// in a FlowLayout Panel which is then added to the SOUTH part
	// of the Frame. The extra FlowLayout Panel won't stretch the
	// Buttons to fill the the Frame, which is what we really want.
	//
	// NOTE: GridBagLayout is a powerful layout manager that makes
	// things like this easier - we use GridBagLayout a lot.
	//
	new Panel {
	    //
	    // Here's one way to get vertical margins around the buttons.
	    //
	    FlowLayout layoutmanager = {
		int vgap = 72/12;
	    };

	    Array layout = {
		new Panel {
		    GridLayout layoutmanager;

		    Array layout = {
			new Button {
			    String text = "Update";
			    Color  background = Color.lightGray;
			    int    requestfocus = TRUE;

			    actionPerformed(e) {
				root.components.$_textarea.text += yoix.util.date() + "\n";
			    }
			},

			new Button {
			    String text = "Clear";
			    Color  background = Color.lightGray;

			    actionPerformed(e) {
				root.components.$_textarea.text = "";
			    }
			},

			new Button {
			    String text = "Quit";
			    Color  background = Color.lightGray;

			    actionPerformed(e) {
				exit(0);
			    }
			},
		    };
		},
	    };
	}, SOUTH,

	//
	// Side padding - just for looks.
	//
	new Canvas {
	    Dimension size = {
		int width = 72/8;
		int height = 72/8;
	    };
	}, EAST,

	new Canvas {
	    Dimension size = {
		int width = 72/8;
		int height = 72/8;
	    };
	}, WEST,
    };
};

f.visible = TRUE;

