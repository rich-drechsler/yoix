//
// An ugly compiler test file - really just for development. You'll find
// many of the test functions in the cleaned up version.
//

import yoix.*.*;

VM.addtags = TRUE;
VM.compiler.addtags = FALSE;
VM.compiler.debug = 0x03;	// shows compiler and assembler output

Dictionary d[0, ...];

int qwert;
int poiuy = 1000;
int zzz = 4;

Constant0() = (int)12.4;
Constant1() = 100 - 12.5 / 3 + 33/3;
Constant2() = (510/2 & 170.0) | 0x01;
Constant3() = (256.0 << 2);
Constant4() = !2;
Constant5() = 5/2 > 1.0;
Constant6() = (int)(5/1 + 2.5);
Constant7() = (2.01 - 2) && (2 - 1);
Constant8() = 3/2 instanceof int;
Constant9() = 9 =~ "[0-9]";
Constant10() = (2 - 1) && 4;
Constant11() = 2 + 2/1 + 3;
Constant12() = (5 < 1) ^^ (1.234);
Constant13() = (1,2,3,4.3) + 5;
Constant14() = 100 - 12/3;
Constant15() = !FALSE ? 200.0 : 300 + 123;
Echo(double n) = n;
Increment(int n) = n + 1;
Decrement(int n) = n - 1;
Add(int left, int right) = left + right;
Sub(int left, int right) = left - right;
Div(int left, int right) = left / right;
QuestionColon1(int cond, int tv, double fv) = cond ? tv : fv;
QuestionColon2(Object cond, String tv, String fv) = cond ? tv : fv;

Bug1() {
    int poiuy = 555;

    poiuy /= 2;
    return(poiuy);
}

Bug2() {
    int count = 1234;

    return(count);
}

Bug3(String str) {
    if (1)
	++str;
    return(str);
}

Bug4(int arg) {
    /////Dictionary dict[3];
    int        n = 12;

    //
    // Uncompiled version gets an error, compiled gets an answer
    // that looks strange (at best). May need an addLvalue() in
    // the compiler somewhere in the address related code??
    //

    &n++;
    /////dict.n = &n++;
    ////n += 1;
    /////dict.str = "now is the time";
    /////return(&dict.n);
}

Bug5() {
    return(asdfg@sizeof);
}

Bug6(int count) {
    int paintlayers;

    paintlayers = (argc <= 3 || argv[4]);
    /////paintlayers = 0 || abcdef[7];
    return(paintlayers);
}

Bug7() {
    int columns;

    columns = ceil(123.5);
    return(columns);
}

Bug8(int arg) {
    Array data;
    int   count;

    count = 10;
    data = new Array[count];
    return(data@sizeof);
}

Array dummy[0, ...];

Bug9(int arg) {
    /////Array dummy[0, ...];

    dummy[dummy@sizeof] = 12;
    return(dummy);
}

int rows;

Bug10() {
    rows = 10;
}

Bug11() {
    int n;

if (1)
    n++;
/****
    Dictionary dict[3];
    int        n = 12;

    dict.n = n++;
    ////n += 1;
    /////dict.str = "now is the time";
    return(&dict.n);
****/
}

Bug12(int arg) {

    /////if (arg < 100)
    /////if (arg < 100 && arg > 0)
    /////if ((arg -= arg) != 0)
    /////if (arg && (arg - arg) || arg)
    /////if (1 + 2 && 100)
    /////if ((qwert += 10) > 0 && arg > 0)
    if (!arg || arg > 12)
	arg++;
    else arg--;
    return(arg);
}

Bug13(int arg) {
    if (1 && 2 || 5)
	arg++;
    else arg--;
    return(arg);
}

Bug14(int arg) {
    Dictionary cell = NULL;
    int        value;
    int        layer;

    for (layer = 0; layer <= 1 && (cell = Bug14Helper(&layer)); layer++) {
	fprintf(stderr, "layer=%d\n", layer);
    }
    return(layer);
}

Bug14Helper(Pointer ptr) {

    *ptr += 1;
    return(new Dictionary[1]);
}

Bug15(int arg) {
    if (!Bug15Helper(arg))
    /////if (!arg)
	arg++;
    else arg--;
    return(arg);
}

Bug15Helper(int arg) {
    return(0);
}

Bug16(int arg) {
    int counter = 2*arg;	// exit infinite loop

    do {
	Bug16Helper(&arg);
	fprintf(stderr, "arg=%d\n", arg);
	/////eval("counter--;");
	counter--;
    } while (arg > 0 && counter > 0);

    return(arg);
}

Bug16Helper(Pointer arg) {
    *arg -= 1;
}

Bug17(int arg) {
    int n;

    for (n = 0; n < arg; ) {
	Bug17Helper(&n);
	fprintf(stderr, "n=%d\n", n);
    }

    return(arg);
}

Bug17Helper(Pointer arg) {
    *arg += 1;
}

Bug18(int arg) {
    int n;

    for (ptr in VM) {
	Bug18Helper(&n);
	fprintf(stderr, "n=%d\n", n);
    }

    return(n);
}

Bug18Helper(Pointer arg) {
    *arg += 1;
}

Bug19(int arg) {
    int n;

    while (n < arg) {
	Bug19Helper(&n);
	fprintf(stderr, "n=%d\n", n);
    }

    return(arg);
}

Bug19Helper(Pointer arg) {
    *arg += 1;
}

Bug20(int arg) {
    if (arg > 0)
	arg += 100;
    else Bug20Helper(&arg);
    return(arg);
}

Bug20Helper(Pointer arg) {
    *arg += 1;
}

/////int dy;

Bug21() {
    int dy = 8;

    for (ptr in VM) {
	dy <<= 1;
if (dy < 0)
break;
    }
    return(dy);
}

Bug22() {
    Array generators;
    int   dy;

    for (ptr in generators) {
	/////dy += cellsize.height - (fontbbox.height + fontbbox.y);
	dy += cellsize.height;
    }
}

int nextlabel;
Bug23(int arg) {
    /////int nextlabel;
    if (1) {
	nextlabel++;		// works
    }
}

Bug24(int arg) {
   int counter;

   counter = 1;
   counter++;
   for (ptr in VM) {
	counter += 1;
   }
   double timer;
   timer = time();
   return(counter);
}

////VM.bind = FALSE;
Bug25(int arg) {
    Object result;

    result = NULL;
    return(result);
}

Bug26(int stop, int counter) {
    if (counter != stop)
	counter += 1;
    return(counter);
}

Bug27(int arg) {
    TRUE = 2;
    //////return(TRUE);
}

Assign(int value) {
    value += 27;
    return(value + 100);
}

Comma(int arg1, int arg2, int arg3) {
    return(arg1, arg2, arg3);
}

Return(int value) {

    /////value = "sdasadsad";
    return(value);
}

If(int arg) {
    if (arg == 100)
	arg++;
    else arg--;
    return(arg);
    /////if (arg instanceof String)
    /////if (arg + 10 < 100 && arg < 1000)
/****
    if (0 && 2 && 3 && 4 || 5)
	arg++;
    else arg--;
    return(arg);
****/
}

If2(int arg) {

    if (arg > 0) {
	while (arg > 0)
	    arg--;
    }
    return(arg);
}

IfElse(Object expr, int truebranch, int falsebranch) {

    if (expr)
	return(truebranch);
    else return(falsebranch);
}

While(int start, int stop, int counter) {
    String str = "now is the time";

    counter = 0;
    while (counter < stop) {
	counter += 1;
	/////str++;
    }
/****
    while (counter < stop) {
	counter += 1;
	start += 1;
    }
****/
    return(counter);
}

DoWhile(int start, int stop, int counter) {

    counter = 0;
    do {
	counter++;
	start += 1;
    } while (start < stop);
    return(counter);
}

For(int index, int arg1, int arg2) {

    for (index = 12; index < 20; index++) {
	arg1 += arg2;
	/////if (arg1 > 2000)
	   ///// break;
    }
    return(arg1);
}

PostIncrement(String str) {
/****
    int n = 2;
    Object qqq;
qqq = "for all good men";
    qqq++;
    return(qqq);
****/

    int n;
    while (n++ < 500000)
	str++;
    str -= str@offset;
    return(str);

/****
    poiuy++;
    return(poiuy);
****/

/****
    str[1]++;
    return(str);
****/
}

PreIncrement(String str) {
    int n;
    while (++n < 500000)
	--str;
    str -= str@offset;
    return(str);
/****
    return(--poiuy);
****/
}

Attribute(String arg) {
    arg++;
    return(arg@sizeof);
}

New(int length) {
    return(new Dictionary[length]);
}

IllegalJump(int arg) {

    if (arg)
	break;
    else arg;
    /////return(arg);
}

Exit(int arg) {

    if (arg > 0)
	exit(arg);
    return(arg);
}

Declaration1(int arg) {
    Array a[arg];
    int n = 100;
n += 20;
    final int m = n + 100;

    /////n = 100;
    /////m = 200;
    return(n + m);
}

Declaration2(int arg) {
    int answer;
    int n = 5;

    if (arg) {
	int n = 10;
	answer = n;
    } else answer = n;
    return(answer);
}

Declaration3(int arg) {
    int answer = arg;
    int dummy = answer++;

    return(answer);
}

External(int arg) {

    arg - poiuy;
    /////qwert = arg - poiuy;
    /////return(qwert);
}

FunctionDef() {
    F(int n) = n + 1;

    return(F);
}

Import() {
    Dictionary d = {
	String asdfg = "Now is the time";
	String lkjh = "for all good men";
	Array abcdef = {1,2,3};
    };

    import d.*;

    return(asdfg);

/****
    import yoix.*.*;

    return(printf);
****/
}

Typedef(int length) {

    typedef xxx(count) {
	Array a[count];
	int   n;

	for (n = 0; n < count; n++)
	    a[n] = n;

	return(a);
    }

    xxx qqq[length];
    return(qqq);
}

Synchronized() {
    int count = 0;

    synchronized(global) {
	count++;
    }
    return(count);
}

Try(int arg) {
    try {
	int qwert = 100;

	arg += qwert;
    }
    catch(e) {}
    return(arg);
}

Finally(int arg) {
    int qqq = 12;

    finally {
	return(qqq);
    }

    qqq += 5;
}

Save(int arg) {
    arg += 1;
    save poiuy = arg;

    arg = poiuy + 10;
    return(arg);
}

NamedBlock(int arg) {
    int bm;

    VM {
	bm = buttonmodel;
    }

    return(bm);
}

ForEach(int arg) {
    int count = 0;

    for (ptr in VM by 1) {
	count++;
    }
    return(count);
}

Qualifier(int arg) {
    int count;

    const count = 100;
    /////count += 3;
    return(count);
}

Include(String path) {
    int count = 1;

    if (access(path, R_OK) == 0) {
	int count = 2;
	include(path);
	if (count > 100) {
	    int dummy = 10;
	    count += dummy;
	}
return(count);
    }
    return(count);
}

Switch1(int arg) {
    switch (arg) {
	case 1:
	    arg += 1;
	    break;

	default:
	    arg += 100;
	    break;
    }

    return(arg);
}


Switch2(arg) {
    String answer = "qwert";

    switch (arg) {
	case 1:
	case 2:
	    answer = "multicase";
	    break;

	case 3:
	    answer = "three";
	    break;

	case 4:
	    switch (arg + 10) {
		case 10:
		    answer = "impossible";
		    break;

		case 14:
		    answer = "four + ten";
		    break;
	    }
	    break;

	case 5:
	    answer = "five";
	    break;

	default:
	    answer = "none of the above";
	    break;
    }

    return(answer);
}


Switch3(int arg) {

    int x = 10;

    switch (arg) {
	case x++:
	    break;

	default:
	    x += 100;
	    break;
    }

    return(x);
}

Array(int arg) {
    Array array[arg];

    array[arg-1] = "Now is the time";
    return(array[arg-1]);
}

Dictionary(int arg) {
    Dictionary dict[arg];

    dict.str = "Now is the time";
    return(dict.str);
}

Global(int arg) {

    global.d.str = "Now is the time";
    return(global.d);
}

This(int arg) {

    this.d.str = "Now is the time";
    return(this.d);
}

Address(int arg) {
    Dictionary dict[3];
    int        n = 12;

    dict.n = n++;
    ////n += 1;
    /////dict.str = "now is the time";
    return(&dict.n);
}

Indirection(int arg) {
    Object ptr = &VM.Version;

    return(*(ptr+1));
}

FunctionCall1(int arg) {
    double total;
    int    n;

VM.compiler.compileFunction(Constant1);
    for (n = 0; n < 3; n++)
	total += Constant1();
    return(total);

    /////compileFunction(Constant1);
    /////return(Constant1());
}

Argv(int arg) {
    Object obj;

    obj = global.argv;
    return(obj);
}

Eval1(int arg) {
    int count = arg;

    //
    // Calling eval() is supposed to disable local variable copies.
    //

    count++;
    eval("count++;");
    count++;
    return(count);
}

Eval2(int arg) {
    Pointer ptr;
    int     count = arg;

    //
    // Taking the address of eval is also supposed to disable local variable
    // copies.
    //

    count++;
    ptr = &eval;
    count++;
    (*ptr)("count++;");
    return(count);
}

Eval3(int arg) {
	Pointer ptr;
	int     count = arg;

	//
	// Taking the address of any reserved word should also supposed to
	// disable local variable copies because eval() could be accessed
	// via the pointer.
	//

	count++;
	ptr = &NULL;
	count++;
	return(count);
}

IntegerDivision(int divisor) {
    int dividend = 100;

    return(dividend/divisor);
}

Conditional1(int arg) {
    /////if (1 && 2 && 3 || 0)
    if (1)
	/////arg++;
	arg = arg + atoi("1");	// arg++ probably also needs work
    else arg = arg - 1;		// arg-- code needs work
    return(arg);
}

Conditional2(int arg) {
    if (1 && 2 || 0)
	arg++;
    else arg--;
    return(arg);
}

Conditional3(int arg) {
    if (0 || 1 && 2 && 0 || 0)
	arg++;
    else arg--;
    return(arg);
}

Conditional4(int arg) {
    if (1 && 4)
	arg++;
    else arg--;
    return(arg);
}

DisableBlockVariables(int arg1, int arg2) {

    //
    // Have to check the generated code to verify.
    //

    arg1++;
    &arg1;	// should disable local block variables
    arg1++;
    arg2++;

    return(arg1);
}

Relational1(int arg1, int arg2) {
    Array a[8];

    a[0] = arg1 < arg2;
    a[1] = arg1 <= arg2;
    a[2] = arg1 > arg2;
    a[3] = arg1 >= arg2;
    a[4] = arg1 == arg2;
    a[5] = arg1 != arg2;
    a[6] = arg1 === arg2;
    a[7] = arg1 !== arg2;

    return(a);
}

Relational2(Object arg1, Object arg2) {
    Array a[8];

    a[0] = arg1 < arg2;
    a[1] = arg1 <= arg2;
    a[2] = arg1 > arg2;
    a[3] = arg1 >= arg2;
    a[4] = arg1 == arg2;
    a[5] = arg1 != arg2;
    a[6] = arg1 === arg2;
    a[7] = arg1 !== arg2;

    return(a);
}

Relational3(int arg1, int arg2) {
    Array a[8];

    if (arg1 < arg2)
	a[0] = 1;
    else a[0] = 0;
    if (arg1 <= arg2)
	a[1] = 1;
    else a[1] = 0;
    if (arg1 > arg2)
	a[2] = 1;
    else a[2] = 0;
    if (arg1 >= arg2)
	a[3] = 1;
    else a[3] = 0;
    if (arg1 == arg2)
	a[4] = 1;
    else a[4] = 0;
    if (arg1 != arg2)
	a[5] = 1;
    else a[5] = 0;
    if (arg1 === arg2)
	a[6] = 1;
    else a[6] = 0;
    if (arg1 !== arg2)
	a[7] = 1;
    else a[7] = 0;

    return(a);
}

Relational4(Object arg1, Object arg2) {
    Array a[8];

    if (arg1 < arg2)
	a[0] = 1;
    else a[0] = 0;
    if (arg1 <= arg2)
	a[1] = 1;
    else a[1] = 0;
    if (arg1 > arg2)
	a[2] = 1;
    else a[2] = 0;
    if (arg1 >= arg2)
	a[3] = 1;
    else a[3] = 0;
    if (arg1 == arg2)
	a[4] = 1;
    else a[4] = 0;
    if (arg1 != arg2)
	a[5] = 1;
    else a[5] = 0;
    if (arg1 === arg2)
	a[6] = 1;
    else a[6] = 0;
    if (arg1 !== arg2)
	a[7] = 1;
    else a[7] = 0;

    return(a);
}

Reserved1(int arg) {
    String str;

    if (defined("arg"))
	str = toString(arg);
    return(str);
}

Reserved2(int arg) {
    String str;

    arg = TRUE;
    return(arg);
}

ObjectReferences1(int arg) {
    Object xxx;

    toString(123);
    toString(456);
}

/////VM.compiler.compileFunction(IntegerDivision);
/////IntegerDivision(0);

/////VM.compiler.compileFunction(Constant1);
/////printf("%.2O\n", Constant1());

/////VM.compiler.compileFunction(Echo);
/////Echo(3);

/////VM.compiler.compileFunction(Assign);
/////yoix.stdio.printf("%O\n", Assign(3));

/////VM.compiler.compileFunction(If);
/////yoix.stdio.printf("%O\n", If(100));

/////VM.compiler.compileFunction(If2);
/////yoix.stdio.printf("%O\n", If2(100));

/////VM.compiler.compileFunction(IfElse);
/////IfElse(0, 2, 3);

/////VM.compiler.compileFunction(Comma);
/////Comma(10,20,30);

/////VM.compiler.compileFunction(Return);
/////Return(12);

/////VM.compiler.compileFunction(QuestionColon1);
/////printf("%O\n", QuestionColon1(FALSE, 1, 2.567));

/////VM.compiler.compileFunction(Add);
/////Add(12.45, 98.5);

/////VM.compiler.compileFunction(Sub);
/////Sub(12, 98);

/////VM.compiler.compileFunction(Div);
/////Div(100, 20);

//////VM.compiler.compileFunction(Assign);
//////Assign(12.45);

VM.compiler.compileFunction(While);
double elapsed;
double starttime = time();
printf("%.2O\n", While(1, 1000000, 10000));
elapsed = time() - starttime;
fprintf(stderr, "elapsed time=%.7f\n", elapsed);

/////VM.compiler.compileFunction(DoWhile);
/////double starttime = time();
/////printf("%O\n", DoWhile(1, 1000000, -12));
/////fprintf(stderr, "elapsed time=%.7f\n", time() - starttime);

/////VM.compiler.compileFunction(PostIncrement);
/////double starttime = time();
/////PostIncrement("Now is the time");
/////fprintf(stderr, "elapsed time=%.7f\n", time() - starttime);

/////VM.compiler.compileFunction(PreIncrement);
/////double starttime = time();
/////PreIncrement("Now is the time");
/////fprintf(stderr, "elapsed time=%.7f\n", time() - starttime);

/////VM.compiler.compileFunction(Attribute);
/////Attribute("Now is the time");

/////VM.compiler.compileFunction(New);
/////New(3);

/////VM.compiler.compileFunction(IllegalJump);
/////IllegalJump(1);

/////VM.compiler.compileFunction(Exit);
/////Exit(100);

/////VM.compiler.compileFunction(For);
/////yoix.stdio.printf("%O\n", For(0, 100, 1000));

/////VM.compiler.compileFunction(Declaration1);
/////Declaration1(1000);

/////VM.compiler.compileFunction(Declaration2);
/////yoix.stdio.printf("%O\n", Declaration2(1));

/////VM.compiler.compileFunction(Declaration3);
/////yoix.stdio.printf("%O\n", Declaration3(122));

/////VM.compiler.compileFunction(External);
/////External(122);

//////////VM.compiler.compileFunction(Bug1);
//////////Bug1();

//////////VM.compiler.compileFunction(Bug2);
//////////Bug2();

//////////yoix.system.compileFunction(Bug3);
//////////Bug3("Now is the time");

//////////yoix.system.compileFunction(Bug4);
//////////printf("%.2O\n", Bug4(2));

/////yoix.system.compileFunction(FunctionDef);
/////FunctionDef();

/////yoix.system.compileFunction(Import);
/////Import();

/////yoix.system.compileFunction(Typedef);
/////Typedef(5);

/////yoix.system.compileFunction(Synchronized);
/////Synchronized();

/////yoix.system.compileFunction(Try);
/////yoix.stdio.printf("%O\n", Try(10));

/////yoix.system.compileFunction(Finally);
/////yoix.stdio.printf("%O\n", Finally(10));

/////yoix.system.compileFunction(Save);
/////yoix.stdio.printf("%O\n", Save(10));
/////yoix.stdio.printf("qwert=%d\n", poiuy);

/////yoix.system.compileFunction(NamedBlock);
/////yoix.stdio.printf("%O\n", NamedBlock(10));

/////yoix.system.compileFunction(ForEach);
/////printf("%O\n", ForEach(2));

/////yoix.system.compileFunction(Qualifier);
/////Qualifier(10);

/////yoix.system.compileFunction(Include);
/////Include("/tmp/include.yx");

/////yoix.system.compileFunction(Switch1);
/////printf("%O\n", Switch1(5));

/////yoix.system.compileFunction(Switch2);
/////printf("%O\n", Switch2(3));

/////yoix.system.compileFunction(Switch3);
/////printf("%O\n", Switch3(100));

/////yoix.system.compileFunction(Dictionary);
/////Dictionary(2);

/////yoix.system.compileFunction(Array);
/////printf("%O\n", Array(2));

/////yoix.system.compileFunction(Global);
/////printf("%O\n", Global(2));

/////yoix.system.compileFunction(This);
/////printf("%O\n", This(2));

/////yoix.system.compileFunction(Address);
/////printf("%.2O\n", Address(2));

/////yoix.system.compileFunction(Indirection);
/////printf("%.2O\n", Indirection(2));

/////yoix.system.compileFunction(FunctionCall1);
/////printf("%.2O\n", FunctionCall1(2));

/////yoix.system.compileFunction(Argv);
/////printf("%.2O\n", Argv(2));

/////yoix.system.compileFunction(Eval1);
/////printf("%.2O\n", Eval1(2));

/////printf("%.2O\n", Eval2(2));
/////printf("%.2O\n", Eval2(2));
/////yoix.system.compileFunction(Eval2);
/////printf("%.2O\n", Eval2(2));

/////yoix.system.compileFunction(Eval3);
/////printf("%.2O\n", Eval3(2));

/////VM.compiler.localcopymodel = 0;
/////VM.compiler.compileFunction(Conditional1);
/////printf("%.2O\n", Conditional1(13));

/////yoix.system.compileFunction(Conditional2);
/////printf("%.2O\n", Conditional2(13));

/////yoix.system.compileFunction(Conditional3);
/////printf("%.2O\n", Conditional3(13));

/////yoix.system.compileFunction(Conditional4);
/////printf("%.2O\n", Conditional4(13));

/////yoix.system.compileFunction(Bug6);
/////printf("%.2O\n", Bug6(123));

/////yoix.system.compileFunction(Bug7);
/////printf("%.2O\n", Bug7());

/////yoix.system.compileFunction(Bug8);
/////printf("%.2O\n", Bug8(10));

/////yoix.system.compileFunction(Bug9);
/////printf("%.2O\n", Bug9(10));

/////yoix.system.compileFunction(Bug10);
/////printf("%.2O\n", Bug10());

////yoix.system.compileFunction(Bug11);
////printf("%.2O\n", Bug11());

/////yoix.system.compileFunction(Bug12);
/////printf("%.2O\n", Bug12(13));

/////yoix.system.compileFunction(Bug13);
/////printf("%.2O\n", Bug13(13));

/////yoix.system.compileFunction(Bug14);
/////printf("%.2O\n", Bug14(13));

/////yoix.system.compileFunction(Bug15);
/////printf("%.2O\n", Bug15(13));

/////yoix.system.compileFunction(Bug16);
/////printf("%.2O\n", Bug16(2));

/////yoix.system.compileFunction(Bug17);
/////printf("%.2O\n", Bug17(10));

/////yoix.system.compileFunction(Bug18);
/////printf("%.2O\n", Bug18(10));

/////yoix.system.compileFunction(Bug19);
/////printf("%.2O\n", Bug19(10));

/////yoix.system.compileFunction(Bug20);
/////printf("%.2O\n", Bug20(10));

/////yoix.system.compileFunction(Bug21);
/////printf("%.2O\n", Bug21());

/////yoix.system.compileFunction(Bug22);
/////printf("%.2O\n", Bug22());

/////yoix.system.compileFunction(Bug24);
/////printf("%.2O\n", Bug24(123));

/////yoix.system.compileFunction(Bug25);
/////printf("%.2O\n", Bug25(123));

/////yoix.system.compileFunction(Bug26);
/////printf("%.2O\n", Bug26(100, 1));

/////yoix.system.compileFunction(Bug27);
/////printf("%.2O\n", Bug27(1));

/////yoix.system.compileFunction(DisableBlockVariables);
/////printf("%.2O\n", DisableBlockVariables(2, 20));

/////yoix.system.compileFunction(Relational1);
/////printf("%.2O\n", Relational1(1, 2));

/////yoix.system.compileFunction(Relational2);
/////printf("%.2O\n", Relational2(1, 2));

/////yoix.system.compileFunction(Relational3);
/////printf("%.2O\n", Relational3(1, 2));

/////yoix.system.compileFunction(Relational4);
/////printf("%.2O\n", Relational4(1, 2));

/////yoix.system.compileFunction(Reserved1);
/////printf("%.2O\n", Reserved1(12345));

/////yoix.system.compileFunction(Reserved2);
/////printf("%.2O\n", Reserved2(12345));

/////yoix.system.compileFunction(ObjectReferences1);
/////printf("%.2O\n", ObjectReferences1(1));

