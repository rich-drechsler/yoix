import yoix.*.*;

bytime(a, b) {
    double t1 = ks.aliases(a,true);
    double t2 = ks.aliases(b,true);

    return(t1 == t2 ? 0 : t1 > t2 ? 1 : -1);
}

int     n;
String  base;

Key k = {
    Dictionary specification = {
	int type = SYMMETRIC_KEY;
	String transformation = "DES";
    };
};

KeyStore ks = {
    String type = "JCEKS";
    String password = "keystore_password";
};

for(n=0; n<10; n++) {
    base = "key" + toString(n);
    if (n > 0) k.key = null; // forces new key generation
    ks.key(base, k.keystring(), base + "_password");
    sleep(0.2); // just to spread out timestamps
}

fprintf(stderr, "KeyStore entry count: %d\n", ks.size);

Array aliases = ks.aliases();
qsort(aliases, bytime);
for(n=0; n<aliases@length; n++)
    fprintf(stdout, "%s(%s): %s... (%s)\n", aliases[n], ks.aliases(aliases[n]), substring(ks.key(aliases[n], aliases[n] + "_password"),0,20), date(ks.aliases(aliases[n], true)));
